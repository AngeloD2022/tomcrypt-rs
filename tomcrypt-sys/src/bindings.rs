/* automatically generated by rust-bindgen 0.70.1 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __MAC_15_0: u32 = 150000;
pub const __MAC_15_1: u32 = 150100;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __IPHONE_18_0: u32 = 180000;
pub const __IPHONE_18_1: u32 = 180100;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __WATCHOS_11_0: u32 = 110000;
pub const __WATCHOS_11_1: u32 = 110100;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __TVOS_18_0: u32 = 180000;
pub const __TVOS_18_1: u32 = 180100;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __BRIDGEOS_9_0: u32 = 90000;
pub const __BRIDGEOS_9_1: u32 = 90100;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __DRIVERKIT_24_0: u32 = 240000;
pub const __DRIVERKIT_24_1: u32 = 240100;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const __VISIONOS_2_0: u32 = 20000;
pub const __VISIONOS_2_1: u32 = 20100;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const MAC_OS_VERSION_15_0: u32 = 150000;
pub const MAC_OS_VERSION_15_1: u32 = 150100;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150100;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const USE_CLANG_TYPES: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const USE_CLANG_STDARG: u32 = 0;
pub const USE_CLANG_STDDEF: u32 = 0;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const _USE_FORTIFY_LEVEL: u32 = 2;
pub const __HAS_FIXED_CHK_PROTOTYPES: u32 = 1;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const TIME_UTC: u32 = 1;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const USE_CLANG_LIMITS: u32 = 0;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const LTC_YARROW_AES: u32 = 2;
pub const LTC_FORTUNA_WD: u32 = 10;
pub const LTC_FORTUNA_POOLS: u32 = 32;
pub const LTC_BCRYPT_DEFAULT_ROUNDS: u32 = 10;
pub const LTC_FILE_READ_BUFSIZE: u32 = 8192;
pub const LTC_PEM_DECODE_BUFSZ: u32 = 80;
pub const LTC_PEM_READ_BUFSIZE: u32 = 8192;
pub const LTC_DER_MAX_RECURSION: u32 = 30;
pub const LTC_PK_MAX_RETRIES: u32 = 20;
pub const CRYPT: u32 = 280;
pub const SCRYPT: &[u8; 15] = b"1.18.2-develop\0";
pub const MAXBLOCKSIZE: u32 = 144;
pub const TAB_SIZE: u32 = 48;
pub const ARGTYPE: u32 = 0;
pub const LTC_ENCRYPT: u32 = 0;
pub const LTC_DECRYPT: u32 = 1;
pub const LTC_SAFER_K64_DEFAULT_NOF_ROUNDS: u32 = 6;
pub const LTC_SAFER_K128_DEFAULT_NOF_ROUNDS: u32 = 10;
pub const LTC_SAFER_SK64_DEFAULT_NOF_ROUNDS: u32 = 8;
pub const LTC_SAFER_SK128_DEFAULT_NOF_ROUNDS: u32 = 10;
pub const LTC_SAFER_MAX_NOF_ROUNDS: u32 = 13;
pub const LTC_SAFER_BLOCK_LEN: u32 = 8;
pub const LTC_SAFER_KEY_LEN: u32 = 217;
pub const LTC_IDEA_ROUNDS: u32 = 8;
pub const LTC_IDEA_KEYLEN: u32 = 52;
pub const CTR_COUNTER_LITTLE_ENDIAN: u32 = 0;
pub const CTR_COUNTER_BIG_ENDIAN: u32 = 4096;
pub const LTC_CTR_RFC3686: u32 = 8192;
pub const LRW_ENCRYPT: u32 = 0;
pub const LRW_DECRYPT: u32 = 1;
pub const LTC_XCBC_PURE: u32 = 32768;
pub const CCM_ENCRYPT: u32 = 0;
pub const CCM_DECRYPT: u32 = 1;
pub const GCM_ENCRYPT: u32 = 0;
pub const GCM_DECRYPT: u32 = 1;
pub const LTC_GCM_MODE_IV: u32 = 0;
pub const LTC_GCM_MODE_AAD: u32 = 1;
pub const LTC_GCM_MODE_TEXT: u32 = 2;
pub const CHACHA20POLY1305_ENCRYPT: u32 = 0;
pub const CHACHA20POLY1305_DECRYPT: u32 = 1;
pub const CHACHA20POLY1305_OPENSSH_COMPAT: u32 = 2;
pub const ECC_BUF_SIZE: u32 = 256;
pub const ECC_MAXSIZE: u32 = 66;
pub const LTC_MDSA_DELTA: u32 = 992;
pub const LTC_MDSA_MAX_GROUP: u32 = 64;
pub const LTC_MDSA_MAX_MODULUS: u32 = 1024;
pub const LTC_MP_LT: i32 = -1;
pub const LTC_MP_EQ: u32 = 0;
pub const LTC_MP_GT: u32 = 1;
pub const LTC_MP_NO: u32 = 0;
pub const LTC_MP_YES: u32 = 1;
pub const LTC_MILLER_RABIN_REPS: u32 = 40;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __nitems: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: __builtin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
        arg5: *const ::std::os::raw::c_char,
        arg6: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(
        __s1: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64_v2 {
    pub __far: __uint64_t,
    pub __esr: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_exception_state64_v2"]
        [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64_v2"]
        [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_neural_footprint: u64,
    pub ri_lifetime_max_neural_footprint: u64,
    pub ri_interval_max_neural_footprint: u64,
    pub ri_reserved: [u64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __count: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type max_align_t = f64;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneEntry"][::std::mem::size_of::<_RuneEntry>() - 24usize];
    ["Alignment of _RuneEntry"][::std::mem::align_of::<_RuneEntry>() - 8usize];
    ["Offset of field: _RuneEntry::__min"][::std::mem::offset_of!(_RuneEntry, __min) - 0usize];
    ["Offset of field: _RuneEntry::__max"][::std::mem::offset_of!(_RuneEntry, __max) - 4usize];
    ["Offset of field: _RuneEntry::__map"][::std::mem::offset_of!(_RuneEntry, __map) - 8usize];
    ["Offset of field: _RuneEntry::__types"][::std::mem::offset_of!(_RuneEntry, __types) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneRange"][::std::mem::size_of::<_RuneRange>() - 16usize];
    ["Alignment of _RuneRange"][::std::mem::align_of::<_RuneRange>() - 8usize];
    ["Offset of field: _RuneRange::__nranges"]
        [::std::mem::offset_of!(_RuneRange, __nranges) - 0usize];
    ["Offset of field: _RuneRange::__ranges"]
        [::std::mem::offset_of!(_RuneRange, __ranges) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneCharClass"][::std::mem::size_of::<_RuneCharClass>() - 20usize];
    ["Alignment of _RuneCharClass"][::std::mem::align_of::<_RuneCharClass>() - 4usize];
    ["Offset of field: _RuneCharClass::__name"]
        [::std::mem::offset_of!(_RuneCharClass, __name) - 0usize];
    ["Offset of field: _RuneCharClass::__mask"]
        [::std::mem::offset_of!(_RuneCharClass, __mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _RuneLocale"][::std::mem::size_of::<_RuneLocale>() - 3208usize];
    ["Alignment of _RuneLocale"][::std::mem::align_of::<_RuneLocale>() - 8usize];
    ["Offset of field: _RuneLocale::__magic"]
        [::std::mem::offset_of!(_RuneLocale, __magic) - 0usize];
    ["Offset of field: _RuneLocale::__encoding"]
        [::std::mem::offset_of!(_RuneLocale, __encoding) - 8usize];
    ["Offset of field: _RuneLocale::__sgetrune"]
        [::std::mem::offset_of!(_RuneLocale, __sgetrune) - 40usize];
    ["Offset of field: _RuneLocale::__sputrune"]
        [::std::mem::offset_of!(_RuneLocale, __sputrune) - 48usize];
    ["Offset of field: _RuneLocale::__invalid_rune"]
        [::std::mem::offset_of!(_RuneLocale, __invalid_rune) - 56usize];
    ["Offset of field: _RuneLocale::__runetype"]
        [::std::mem::offset_of!(_RuneLocale, __runetype) - 60usize];
    ["Offset of field: _RuneLocale::__maplower"]
        [::std::mem::offset_of!(_RuneLocale, __maplower) - 1084usize];
    ["Offset of field: _RuneLocale::__mapupper"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper) - 2108usize];
    ["Offset of field: _RuneLocale::__runetype_ext"]
        [::std::mem::offset_of!(_RuneLocale, __runetype_ext) - 3136usize];
    ["Offset of field: _RuneLocale::__maplower_ext"]
        [::std::mem::offset_of!(_RuneLocale, __maplower_ext) - 3152usize];
    ["Offset of field: _RuneLocale::__mapupper_ext"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper_ext) - 3168usize];
    ["Offset of field: _RuneLocale::__variable"]
        [::std::mem::offset_of!(_RuneLocale, __variable) - 3184usize];
    ["Offset of field: _RuneLocale::__variable_len"]
        [::std::mem::offset_of!(_RuneLocale, __variable_len) - 3192usize];
    ["Offset of field: _RuneLocale::__ncharclasses"]
        [::std::mem::offset_of!(_RuneLocale, __ncharclasses) - 3196usize];
    ["Offset of field: _RuneLocale::__charclasses"]
        [::std::mem::offset_of!(_RuneLocale, __charclasses) - 3200usize];
};
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub const CRYPT_OK: _bindgen_ty_1 = 0;
pub const CRYPT_ERROR: _bindgen_ty_1 = 1;
pub const CRYPT_NOP: _bindgen_ty_1 = 2;
pub const CRYPT_INVALID_KEYSIZE: _bindgen_ty_1 = 3;
pub const CRYPT_INVALID_ROUNDS: _bindgen_ty_1 = 4;
pub const CRYPT_FAIL_TESTVECTOR: _bindgen_ty_1 = 5;
pub const CRYPT_BUFFER_OVERFLOW: _bindgen_ty_1 = 6;
pub const CRYPT_INVALID_PACKET: _bindgen_ty_1 = 7;
pub const CRYPT_INVALID_PRNGSIZE: _bindgen_ty_1 = 8;
pub const CRYPT_ERROR_READPRNG: _bindgen_ty_1 = 9;
pub const CRYPT_INVALID_CIPHER: _bindgen_ty_1 = 10;
pub const CRYPT_INVALID_HASH: _bindgen_ty_1 = 11;
pub const CRYPT_INVALID_PRNG: _bindgen_ty_1 = 12;
pub const CRYPT_MEM: _bindgen_ty_1 = 13;
pub const CRYPT_PK_TYPE_MISMATCH: _bindgen_ty_1 = 14;
pub const CRYPT_PK_NOT_PRIVATE: _bindgen_ty_1 = 15;
pub const CRYPT_INVALID_ARG: _bindgen_ty_1 = 16;
pub const CRYPT_FILE_NOTFOUND: _bindgen_ty_1 = 17;
pub const CRYPT_PK_INVALID_TYPE: _bindgen_ty_1 = 18;
pub const CRYPT_OVERFLOW: _bindgen_ty_1 = 19;
pub const CRYPT_PK_ASN1_ERROR: _bindgen_ty_1 = 20;
pub const CRYPT_INPUT_TOO_LONG: _bindgen_ty_1 = 21;
pub const CRYPT_PK_INVALID_SIZE: _bindgen_ty_1 = 22;
pub const CRYPT_INVALID_PRIME_SIZE: _bindgen_ty_1 = 23;
pub const CRYPT_PK_INVALID_PADDING: _bindgen_ty_1 = 24;
pub const CRYPT_HASH_OVERFLOW: _bindgen_ty_1 = 25;
pub const CRYPT_PW_CTX_MISSING: _bindgen_ty_1 = 26;
pub const CRYPT_UNKNOWN_PEM: _bindgen_ty_1 = 27;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub type ulong64 = ::std::os::raw::c_ulonglong;
pub type long64 = ::std::os::raw::c_longlong;
pub type ulong32 = ::std::os::raw::c_uint;
pub type ltc_mp_digit = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blowfish_key {
    pub S: [[ulong32; 256usize]; 4usize],
    pub K: [ulong32; 18usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of blowfish_key"][::std::mem::size_of::<blowfish_key>() - 4168usize];
    ["Alignment of blowfish_key"][::std::mem::align_of::<blowfish_key>() - 4usize];
    ["Offset of field: blowfish_key::S"][::std::mem::offset_of!(blowfish_key, S) - 0usize];
    ["Offset of field: blowfish_key::K"][::std::mem::offset_of!(blowfish_key, K) - 4096usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc5_key {
    pub rounds: ::std::os::raw::c_int,
    pub K: [ulong32; 50usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc5_key"][::std::mem::size_of::<rc5_key>() - 204usize];
    ["Alignment of rc5_key"][::std::mem::align_of::<rc5_key>() - 4usize];
    ["Offset of field: rc5_key::rounds"][::std::mem::offset_of!(rc5_key, rounds) - 0usize];
    ["Offset of field: rc5_key::K"][::std::mem::offset_of!(rc5_key, K) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc6_key {
    pub K: [ulong32; 44usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc6_key"][::std::mem::size_of::<rc6_key>() - 176usize];
    ["Alignment of rc6_key"][::std::mem::align_of::<rc6_key>() - 4usize];
    ["Offset of field: rc6_key::K"][::std::mem::offset_of!(rc6_key, K) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct saferp_key {
    pub K: [[::std::os::raw::c_uchar; 16usize]; 33usize],
    pub rounds: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of saferp_key"][::std::mem::size_of::<saferp_key>() - 536usize];
    ["Alignment of saferp_key"][::std::mem::align_of::<saferp_key>() - 8usize];
    ["Offset of field: saferp_key::K"][::std::mem::offset_of!(saferp_key, K) - 0usize];
    ["Offset of field: saferp_key::rounds"][::std::mem::offset_of!(saferp_key, rounds) - 528usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rijndael_key {
    pub K: [::std::os::raw::c_uchar; 496usize],
    pub eK: *mut ulong32,
    pub dK: *mut ulong32,
    pub Nr: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rijndael_key"][::std::mem::size_of::<rijndael_key>() - 520usize];
    ["Alignment of rijndael_key"][::std::mem::align_of::<rijndael_key>() - 8usize];
    ["Offset of field: rijndael_key::K"][::std::mem::offset_of!(rijndael_key, K) - 0usize];
    ["Offset of field: rijndael_key::eK"][::std::mem::offset_of!(rijndael_key, eK) - 496usize];
    ["Offset of field: rijndael_key::dK"][::std::mem::offset_of!(rijndael_key, dK) - 504usize];
    ["Offset of field: rijndael_key::Nr"][::std::mem::offset_of!(rijndael_key, Nr) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kseed_key {
    pub K: [ulong32; 32usize],
    pub dK: [ulong32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kseed_key"][::std::mem::size_of::<kseed_key>() - 256usize];
    ["Alignment of kseed_key"][::std::mem::align_of::<kseed_key>() - 4usize];
    ["Offset of field: kseed_key::K"][::std::mem::offset_of!(kseed_key, K) - 0usize];
    ["Offset of field: kseed_key::dK"][::std::mem::offset_of!(kseed_key, dK) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct kasumi_key {
    pub KLi1: [ulong32; 8usize],
    pub KLi2: [ulong32; 8usize],
    pub KOi1: [ulong32; 8usize],
    pub KOi2: [ulong32; 8usize],
    pub KOi3: [ulong32; 8usize],
    pub KIi1: [ulong32; 8usize],
    pub KIi2: [ulong32; 8usize],
    pub KIi3: [ulong32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of kasumi_key"][::std::mem::size_of::<kasumi_key>() - 256usize];
    ["Alignment of kasumi_key"][::std::mem::align_of::<kasumi_key>() - 4usize];
    ["Offset of field: kasumi_key::KLi1"][::std::mem::offset_of!(kasumi_key, KLi1) - 0usize];
    ["Offset of field: kasumi_key::KLi2"][::std::mem::offset_of!(kasumi_key, KLi2) - 32usize];
    ["Offset of field: kasumi_key::KOi1"][::std::mem::offset_of!(kasumi_key, KOi1) - 64usize];
    ["Offset of field: kasumi_key::KOi2"][::std::mem::offset_of!(kasumi_key, KOi2) - 96usize];
    ["Offset of field: kasumi_key::KOi3"][::std::mem::offset_of!(kasumi_key, KOi3) - 128usize];
    ["Offset of field: kasumi_key::KIi1"][::std::mem::offset_of!(kasumi_key, KIi1) - 160usize];
    ["Offset of field: kasumi_key::KIi2"][::std::mem::offset_of!(kasumi_key, KIi2) - 192usize];
    ["Offset of field: kasumi_key::KIi3"][::std::mem::offset_of!(kasumi_key, KIi3) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xtea_key {
    pub A: [::std::os::raw::c_ulong; 32usize],
    pub B: [::std::os::raw::c_ulong; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xtea_key"][::std::mem::size_of::<xtea_key>() - 512usize];
    ["Alignment of xtea_key"][::std::mem::align_of::<xtea_key>() - 8usize];
    ["Offset of field: xtea_key::A"][::std::mem::offset_of!(xtea_key, A) - 0usize];
    ["Offset of field: xtea_key::B"][::std::mem::offset_of!(xtea_key, B) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct twofish_key {
    pub S: [[ulong32; 256usize]; 4usize],
    pub K: [ulong32; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of twofish_key"][::std::mem::size_of::<twofish_key>() - 4256usize];
    ["Alignment of twofish_key"][::std::mem::align_of::<twofish_key>() - 4usize];
    ["Offset of field: twofish_key::S"][::std::mem::offset_of!(twofish_key, S) - 0usize];
    ["Offset of field: twofish_key::K"][::std::mem::offset_of!(twofish_key, K) - 4096usize];
};
pub type safer_block_t = [::std::os::raw::c_uchar; 8usize];
pub type safer_key_t = [::std::os::raw::c_uchar; 217usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct safer_key {
    pub key: safer_key_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of safer_key"][::std::mem::size_of::<safer_key>() - 217usize];
    ["Alignment of safer_key"][::std::mem::align_of::<safer_key>() - 1usize];
    ["Offset of field: safer_key::key"][::std::mem::offset_of!(safer_key, key) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc2_key {
    pub xkey: [::std::os::raw::c_uint; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc2_key"][::std::mem::size_of::<rc2_key>() - 256usize];
    ["Alignment of rc2_key"][::std::mem::align_of::<rc2_key>() - 4usize];
    ["Offset of field: rc2_key::xkey"][::std::mem::offset_of!(rc2_key, xkey) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct des_key {
    pub ek: [ulong32; 32usize],
    pub dk: [ulong32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of des_key"][::std::mem::size_of::<des_key>() - 256usize];
    ["Alignment of des_key"][::std::mem::align_of::<des_key>() - 4usize];
    ["Offset of field: des_key::ek"][::std::mem::offset_of!(des_key, ek) - 0usize];
    ["Offset of field: des_key::dk"][::std::mem::offset_of!(des_key, dk) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct desx_key {
    pub ek: [ulong32; 32usize],
    pub dk: [ulong32; 32usize],
    pub k: [[ulong32; 2usize]; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of desx_key"][::std::mem::size_of::<desx_key>() - 272usize];
    ["Alignment of desx_key"][::std::mem::align_of::<desx_key>() - 4usize];
    ["Offset of field: desx_key::ek"][::std::mem::offset_of!(desx_key, ek) - 0usize];
    ["Offset of field: desx_key::dk"][::std::mem::offset_of!(desx_key, dk) - 128usize];
    ["Offset of field: desx_key::k"][::std::mem::offset_of!(desx_key, k) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct des3_key {
    pub ek: [[ulong32; 32usize]; 3usize],
    pub dk: [[ulong32; 32usize]; 3usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of des3_key"][::std::mem::size_of::<des3_key>() - 768usize];
    ["Alignment of des3_key"][::std::mem::align_of::<des3_key>() - 4usize];
    ["Offset of field: des3_key::ek"][::std::mem::offset_of!(des3_key, ek) - 0usize];
    ["Offset of field: des3_key::dk"][::std::mem::offset_of!(des3_key, dk) - 384usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sm4_key {
    pub ek: [ulong32; 32usize],
    pub dk: [ulong32; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sm4_key"][::std::mem::size_of::<sm4_key>() - 256usize];
    ["Alignment of sm4_key"][::std::mem::align_of::<sm4_key>() - 4usize];
    ["Offset of field: sm4_key::ek"][::std::mem::offset_of!(sm4_key, ek) - 0usize];
    ["Offset of field: sm4_key::dk"][::std::mem::offset_of!(sm4_key, dk) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cast5_key {
    pub K: [ulong32; 32usize],
    pub keylen: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cast5_key"][::std::mem::size_of::<cast5_key>() - 132usize];
    ["Alignment of cast5_key"][::std::mem::align_of::<cast5_key>() - 4usize];
    ["Offset of field: cast5_key::K"][::std::mem::offset_of!(cast5_key, K) - 0usize];
    ["Offset of field: cast5_key::keylen"][::std::mem::offset_of!(cast5_key, keylen) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct noekeon_key {
    pub K: [ulong32; 4usize],
    pub dK: [ulong32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of noekeon_key"][::std::mem::size_of::<noekeon_key>() - 32usize];
    ["Alignment of noekeon_key"][::std::mem::align_of::<noekeon_key>() - 4usize];
    ["Offset of field: noekeon_key::K"][::std::mem::offset_of!(noekeon_key, K) - 0usize];
    ["Offset of field: noekeon_key::dK"][::std::mem::offset_of!(noekeon_key, dK) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct skipjack_key {
    pub key: [::std::os::raw::c_uchar; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of skipjack_key"][::std::mem::size_of::<skipjack_key>() - 10usize];
    ["Alignment of skipjack_key"][::std::mem::align_of::<skipjack_key>() - 1usize];
    ["Offset of field: skipjack_key::key"][::std::mem::offset_of!(skipjack_key, key) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct khazad_key {
    pub roundKeyEnc: [ulong64; 9usize],
    pub roundKeyDec: [ulong64; 9usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of khazad_key"][::std::mem::size_of::<khazad_key>() - 144usize];
    ["Alignment of khazad_key"][::std::mem::align_of::<khazad_key>() - 8usize];
    ["Offset of field: khazad_key::roundKeyEnc"]
        [::std::mem::offset_of!(khazad_key, roundKeyEnc) - 0usize];
    ["Offset of field: khazad_key::roundKeyDec"]
        [::std::mem::offset_of!(khazad_key, roundKeyDec) - 72usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct anubis_key {
    pub roundKeyEnc: [[ulong32; 4usize]; 19usize],
    pub roundKeyDec: [[ulong32; 4usize]; 19usize],
    pub keyBits: ::std::os::raw::c_int,
    pub R: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of anubis_key"][::std::mem::size_of::<anubis_key>() - 616usize];
    ["Alignment of anubis_key"][::std::mem::align_of::<anubis_key>() - 4usize];
    ["Offset of field: anubis_key::roundKeyEnc"]
        [::std::mem::offset_of!(anubis_key, roundKeyEnc) - 0usize];
    ["Offset of field: anubis_key::roundKeyDec"]
        [::std::mem::offset_of!(anubis_key, roundKeyDec) - 304usize];
    ["Offset of field: anubis_key::keyBits"]
        [::std::mem::offset_of!(anubis_key, keyBits) - 608usize];
    ["Offset of field: anubis_key::R"][::std::mem::offset_of!(anubis_key, R) - 612usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multi2_key {
    pub uk: [ulong32; 8usize],
    pub N: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of multi2_key"][::std::mem::size_of::<multi2_key>() - 36usize];
    ["Alignment of multi2_key"][::std::mem::align_of::<multi2_key>() - 4usize];
    ["Offset of field: multi2_key::uk"][::std::mem::offset_of!(multi2_key, uk) - 0usize];
    ["Offset of field: multi2_key::N"][::std::mem::offset_of!(multi2_key, N) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct camellia_key {
    pub kw: [ulong64; 4usize],
    pub k: [ulong64; 24usize],
    pub kl: [ulong64; 6usize],
    pub R: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of camellia_key"][::std::mem::size_of::<camellia_key>() - 280usize];
    ["Alignment of camellia_key"][::std::mem::align_of::<camellia_key>() - 8usize];
    ["Offset of field: camellia_key::kw"][::std::mem::offset_of!(camellia_key, kw) - 0usize];
    ["Offset of field: camellia_key::k"][::std::mem::offset_of!(camellia_key, k) - 32usize];
    ["Offset of field: camellia_key::kl"][::std::mem::offset_of!(camellia_key, kl) - 224usize];
    ["Offset of field: camellia_key::R"][::std::mem::offset_of!(camellia_key, R) - 272usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct idea_key {
    pub ek: [::std::os::raw::c_ushort; 52usize],
    pub dk: [::std::os::raw::c_ushort; 52usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of idea_key"][::std::mem::size_of::<idea_key>() - 208usize];
    ["Alignment of idea_key"][::std::mem::align_of::<idea_key>() - 2usize];
    ["Offset of field: idea_key::ek"][::std::mem::offset_of!(idea_key, ek) - 0usize];
    ["Offset of field: idea_key::dk"][::std::mem::offset_of!(idea_key, dk) - 104usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct serpent_key {
    pub k: [ulong32; 132usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of serpent_key"][::std::mem::size_of::<serpent_key>() - 528usize];
    ["Alignment of serpent_key"][::std::mem::align_of::<serpent_key>() - 4usize];
    ["Offset of field: serpent_key::k"][::std::mem::offset_of!(serpent_key, k) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tea_key {
    pub k: [ulong32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tea_key"][::std::mem::size_of::<tea_key>() - 16usize];
    ["Alignment of tea_key"][::std::mem::align_of::<tea_key>() - 4usize];
    ["Offset of field: tea_key::k"][::std::mem::offset_of!(tea_key, k) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Symmetric_key {
    pub des: des_key,
    pub desx: desx_key,
    pub des3: des3_key,
    pub sm4: sm4_key,
    pub rc2: rc2_key,
    pub safer: safer_key,
    pub twofish: twofish_key,
    pub blowfish: blowfish_key,
    pub rc5: rc5_key,
    pub rc6: rc6_key,
    pub saferp: saferp_key,
    pub rijndael: rijndael_key,
    pub xtea: xtea_key,
    pub cast5: cast5_key,
    pub noekeon: noekeon_key,
    pub skipjack: skipjack_key,
    pub khazad: khazad_key,
    pub anubis: anubis_key,
    pub kseed: kseed_key,
    pub kasumi: kasumi_key,
    pub multi2: multi2_key,
    pub camellia: camellia_key,
    pub idea: idea_key,
    pub serpent: serpent_key,
    pub tea: tea_key,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Symmetric_key"][::std::mem::size_of::<Symmetric_key>() - 4256usize];
    ["Alignment of Symmetric_key"][::std::mem::align_of::<Symmetric_key>() - 8usize];
    ["Offset of field: Symmetric_key::des"][::std::mem::offset_of!(Symmetric_key, des) - 0usize];
    ["Offset of field: Symmetric_key::desx"][::std::mem::offset_of!(Symmetric_key, desx) - 0usize];
    ["Offset of field: Symmetric_key::des3"][::std::mem::offset_of!(Symmetric_key, des3) - 0usize];
    ["Offset of field: Symmetric_key::sm4"][::std::mem::offset_of!(Symmetric_key, sm4) - 0usize];
    ["Offset of field: Symmetric_key::rc2"][::std::mem::offset_of!(Symmetric_key, rc2) - 0usize];
    ["Offset of field: Symmetric_key::safer"]
        [::std::mem::offset_of!(Symmetric_key, safer) - 0usize];
    ["Offset of field: Symmetric_key::twofish"]
        [::std::mem::offset_of!(Symmetric_key, twofish) - 0usize];
    ["Offset of field: Symmetric_key::blowfish"]
        [::std::mem::offset_of!(Symmetric_key, blowfish) - 0usize];
    ["Offset of field: Symmetric_key::rc5"][::std::mem::offset_of!(Symmetric_key, rc5) - 0usize];
    ["Offset of field: Symmetric_key::rc6"][::std::mem::offset_of!(Symmetric_key, rc6) - 0usize];
    ["Offset of field: Symmetric_key::saferp"]
        [::std::mem::offset_of!(Symmetric_key, saferp) - 0usize];
    ["Offset of field: Symmetric_key::rijndael"]
        [::std::mem::offset_of!(Symmetric_key, rijndael) - 0usize];
    ["Offset of field: Symmetric_key::xtea"][::std::mem::offset_of!(Symmetric_key, xtea) - 0usize];
    ["Offset of field: Symmetric_key::cast5"]
        [::std::mem::offset_of!(Symmetric_key, cast5) - 0usize];
    ["Offset of field: Symmetric_key::noekeon"]
        [::std::mem::offset_of!(Symmetric_key, noekeon) - 0usize];
    ["Offset of field: Symmetric_key::skipjack"]
        [::std::mem::offset_of!(Symmetric_key, skipjack) - 0usize];
    ["Offset of field: Symmetric_key::khazad"]
        [::std::mem::offset_of!(Symmetric_key, khazad) - 0usize];
    ["Offset of field: Symmetric_key::anubis"]
        [::std::mem::offset_of!(Symmetric_key, anubis) - 0usize];
    ["Offset of field: Symmetric_key::kseed"]
        [::std::mem::offset_of!(Symmetric_key, kseed) - 0usize];
    ["Offset of field: Symmetric_key::kasumi"]
        [::std::mem::offset_of!(Symmetric_key, kasumi) - 0usize];
    ["Offset of field: Symmetric_key::multi2"]
        [::std::mem::offset_of!(Symmetric_key, multi2) - 0usize];
    ["Offset of field: Symmetric_key::camellia"]
        [::std::mem::offset_of!(Symmetric_key, camellia) - 0usize];
    ["Offset of field: Symmetric_key::idea"][::std::mem::offset_of!(Symmetric_key, idea) - 0usize];
    ["Offset of field: Symmetric_key::serpent"]
        [::std::mem::offset_of!(Symmetric_key, serpent) - 0usize];
    ["Offset of field: Symmetric_key::tea"][::std::mem::offset_of!(Symmetric_key, tea) - 0usize];
    ["Offset of field: Symmetric_key::data"][::std::mem::offset_of!(Symmetric_key, data) - 0usize];
};
pub type symmetric_key = Symmetric_key;
#[doc = " A block cipher ECB structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_ECB {
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_ECB"][::std::mem::size_of::<symmetric_ECB>() - 4264usize];
    ["Alignment of symmetric_ECB"][::std::mem::align_of::<symmetric_ECB>() - 8usize];
    ["Offset of field: symmetric_ECB::key"][::std::mem::offset_of!(symmetric_ECB, key) - 0usize];
    ["Offset of field: symmetric_ECB::cipher"]
        [::std::mem::offset_of!(symmetric_ECB, cipher) - 4256usize];
    ["Offset of field: symmetric_ECB::blocklen"]
        [::std::mem::offset_of!(symmetric_ECB, blocklen) - 4260usize];
};
#[doc = " A block cipher CFB structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_CFB {
    #[doc = " The current IV"]
    pub IV: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The pad used to encrypt/decrypt"]
    pub pad: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
    #[doc = " The width of the mode: 1, 8, 64, or 128"]
    pub width: ::std::os::raw::c_int,
    #[doc = " The padding offset"]
    pub padlen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_CFB"][::std::mem::size_of::<symmetric_CFB>() - 4560usize];
    ["Alignment of symmetric_CFB"][::std::mem::align_of::<symmetric_CFB>() - 8usize];
    ["Offset of field: symmetric_CFB::IV"][::std::mem::offset_of!(symmetric_CFB, IV) - 0usize];
    ["Offset of field: symmetric_CFB::pad"][::std::mem::offset_of!(symmetric_CFB, pad) - 144usize];
    ["Offset of field: symmetric_CFB::key"][::std::mem::offset_of!(symmetric_CFB, key) - 288usize];
    ["Offset of field: symmetric_CFB::cipher"]
        [::std::mem::offset_of!(symmetric_CFB, cipher) - 4544usize];
    ["Offset of field: symmetric_CFB::blocklen"]
        [::std::mem::offset_of!(symmetric_CFB, blocklen) - 4548usize];
    ["Offset of field: symmetric_CFB::width"]
        [::std::mem::offset_of!(symmetric_CFB, width) - 4552usize];
    ["Offset of field: symmetric_CFB::padlen"]
        [::std::mem::offset_of!(symmetric_CFB, padlen) - 4556usize];
};
#[doc = " A block cipher OFB structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_OFB {
    #[doc = " The current IV"]
    pub IV: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
    #[doc = " The padding offset"]
    pub padlen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_OFB"][::std::mem::size_of::<symmetric_OFB>() - 4416usize];
    ["Alignment of symmetric_OFB"][::std::mem::align_of::<symmetric_OFB>() - 8usize];
    ["Offset of field: symmetric_OFB::IV"][::std::mem::offset_of!(symmetric_OFB, IV) - 0usize];
    ["Offset of field: symmetric_OFB::key"][::std::mem::offset_of!(symmetric_OFB, key) - 144usize];
    ["Offset of field: symmetric_OFB::cipher"]
        [::std::mem::offset_of!(symmetric_OFB, cipher) - 4400usize];
    ["Offset of field: symmetric_OFB::blocklen"]
        [::std::mem::offset_of!(symmetric_OFB, blocklen) - 4404usize];
    ["Offset of field: symmetric_OFB::padlen"]
        [::std::mem::offset_of!(symmetric_OFB, padlen) - 4408usize];
};
#[doc = " A block cipher CBC structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_CBC {
    #[doc = " The current IV"]
    pub IV: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_CBC"][::std::mem::size_of::<symmetric_CBC>() - 4408usize];
    ["Alignment of symmetric_CBC"][::std::mem::align_of::<symmetric_CBC>() - 8usize];
    ["Offset of field: symmetric_CBC::IV"][::std::mem::offset_of!(symmetric_CBC, IV) - 0usize];
    ["Offset of field: symmetric_CBC::key"][::std::mem::offset_of!(symmetric_CBC, key) - 144usize];
    ["Offset of field: symmetric_CBC::cipher"]
        [::std::mem::offset_of!(symmetric_CBC, cipher) - 4400usize];
    ["Offset of field: symmetric_CBC::blocklen"]
        [::std::mem::offset_of!(symmetric_CBC, blocklen) - 4404usize];
};
#[doc = " A block cipher CTR structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_CTR {
    #[doc = " The counter"]
    pub ctr: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The pad used to encrypt/decrypt"]
    pub pad: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
    #[doc = " The padding offset"]
    pub padlen: ::std::os::raw::c_int,
    #[doc = " The mode (endianess) of the CTR, 0==little, 1==big"]
    pub mode: ::std::os::raw::c_int,
    #[doc = " counter width"]
    pub ctrlen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_CTR"][::std::mem::size_of::<symmetric_CTR>() - 4568usize];
    ["Alignment of symmetric_CTR"][::std::mem::align_of::<symmetric_CTR>() - 8usize];
    ["Offset of field: symmetric_CTR::ctr"][::std::mem::offset_of!(symmetric_CTR, ctr) - 0usize];
    ["Offset of field: symmetric_CTR::pad"][::std::mem::offset_of!(symmetric_CTR, pad) - 144usize];
    ["Offset of field: symmetric_CTR::key"][::std::mem::offset_of!(symmetric_CTR, key) - 288usize];
    ["Offset of field: symmetric_CTR::cipher"]
        [::std::mem::offset_of!(symmetric_CTR, cipher) - 4544usize];
    ["Offset of field: symmetric_CTR::blocklen"]
        [::std::mem::offset_of!(symmetric_CTR, blocklen) - 4548usize];
    ["Offset of field: symmetric_CTR::padlen"]
        [::std::mem::offset_of!(symmetric_CTR, padlen) - 4552usize];
    ["Offset of field: symmetric_CTR::mode"]
        [::std::mem::offset_of!(symmetric_CTR, mode) - 4556usize];
    ["Offset of field: symmetric_CTR::ctrlen"]
        [::std::mem::offset_of!(symmetric_CTR, ctrlen) - 4560usize];
};
#[doc = " A LRW structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_LRW {
    #[doc = " The current IV"]
    pub IV: [::std::os::raw::c_uchar; 16usize],
    #[doc = " the tweak key"]
    pub tweak: [::std::os::raw::c_uchar; 16usize],
    #[doc = " The current pad, it's the product of the first 15 bytes against the tweak key"]
    pub pad: [::std::os::raw::c_uchar; 16usize],
    #[doc = " The scheduled symmetric key"]
    pub key: symmetric_key,
    #[doc = " The pre-computed multiplication table"]
    pub PC: [[[::std::os::raw::c_uchar; 16usize]; 256usize]; 16usize],
    #[doc = " The index of the cipher chosen (must be a 128-bit block cipher)"]
    pub cipher: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_LRW"][::std::mem::size_of::<symmetric_LRW>() - 69848usize];
    ["Alignment of symmetric_LRW"][::std::mem::align_of::<symmetric_LRW>() - 8usize];
    ["Offset of field: symmetric_LRW::IV"][::std::mem::offset_of!(symmetric_LRW, IV) - 0usize];
    ["Offset of field: symmetric_LRW::tweak"]
        [::std::mem::offset_of!(symmetric_LRW, tweak) - 16usize];
    ["Offset of field: symmetric_LRW::pad"][::std::mem::offset_of!(symmetric_LRW, pad) - 32usize];
    ["Offset of field: symmetric_LRW::key"][::std::mem::offset_of!(symmetric_LRW, key) - 48usize];
    ["Offset of field: symmetric_LRW::PC"][::std::mem::offset_of!(symmetric_LRW, PC) - 4304usize];
    ["Offset of field: symmetric_LRW::cipher"]
        [::std::mem::offset_of!(symmetric_LRW, cipher) - 69840usize];
};
#[doc = " A block cipher F8 structure"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_F8 {
    #[doc = " The current IV"]
    pub IV: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The current IV"]
    pub MIV: [::std::os::raw::c_uchar; 144usize],
    #[doc = " The scheduled key"]
    pub key: symmetric_key,
    #[doc = " The index of the cipher chosen"]
    pub cipher: ::std::os::raw::c_int,
    #[doc = " The block size of the given cipher"]
    pub blocklen: ::std::os::raw::c_int,
    #[doc = " The padding offset"]
    pub padlen: ::std::os::raw::c_int,
    #[doc = " Current block count"]
    pub blockcnt: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_F8"][::std::mem::size_of::<symmetric_F8>() - 4560usize];
    ["Alignment of symmetric_F8"][::std::mem::align_of::<symmetric_F8>() - 8usize];
    ["Offset of field: symmetric_F8::IV"][::std::mem::offset_of!(symmetric_F8, IV) - 0usize];
    ["Offset of field: symmetric_F8::MIV"][::std::mem::offset_of!(symmetric_F8, MIV) - 144usize];
    ["Offset of field: symmetric_F8::key"][::std::mem::offset_of!(symmetric_F8, key) - 288usize];
    ["Offset of field: symmetric_F8::cipher"]
        [::std::mem::offset_of!(symmetric_F8, cipher) - 4544usize];
    ["Offset of field: symmetric_F8::blocklen"]
        [::std::mem::offset_of!(symmetric_F8, blocklen) - 4548usize];
    ["Offset of field: symmetric_F8::padlen"]
        [::std::mem::offset_of!(symmetric_F8, padlen) - 4552usize];
    ["Offset of field: symmetric_F8::blockcnt"]
        [::std::mem::offset_of!(symmetric_F8, blockcnt) - 4556usize];
};
#[doc = " cipher descriptor table, last entry has \"name == NULL\" to mark the end of table"]
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ltc_cipher_descriptor {
    #[doc = " name of cipher"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " internal ID"]
    pub ID: ::std::os::raw::c_uchar,
    #[doc = " min keysize (octets)"]
    pub min_key_length: ::std::os::raw::c_int,
    #[doc = " max keysize (octets)"]
    pub max_key_length: ::std::os::raw::c_int,
    #[doc = " block size (octets)"]
    pub block_length: ::std::os::raw::c_int,
    #[doc = " default number of rounds"]
    pub default_rounds: ::std::os::raw::c_int,
    #[doc = " Setup the cipher\n@param key         The input symmetric key\n@param keylen      The length of the input key (octets)\n@param num_rounds  The requested number of rounds (0==default)\n@param skey        [out] The destination of the scheduled key\n@return CRYPT_OK if successful"]
    pub setup: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_int,
            num_rounds: ::std::os::raw::c_int,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Encrypt a block\n@param pt      The plaintext\n@param ct      [out] The ciphertext\n@param skey    The scheduled key\n@return CRYPT_OK if successful"]
    pub ecb_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            skey: *const symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Decrypt a block\n@param ct      The ciphertext\n@param pt      [out] The plaintext\n@param skey    The scheduled key\n@return CRYPT_OK if successful"]
    pub ecb_decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ct: *const ::std::os::raw::c_uchar,
            pt: *mut ::std::os::raw::c_uchar,
            skey: *const symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Test the block cipher\n@return CRYPT_OK if successful, CRYPT_NOP if self-testing has been disabled"]
    pub test: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    #[doc = " Terminate the context\n@param skey    The scheduled key"]
    pub done: ::std::option::Option<unsafe extern "C" fn(skey: *mut symmetric_key)>,
    #[doc = " Determine a key size\n@param keysize    [in/out] The size of the key desired and the suggested size\n@return CRYPT_OK if successful"]
    pub keysize: ::std::option::Option<
        unsafe extern "C" fn(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerators **/\n/** Accelerated ECB encryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_ecb_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated ECB decryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_ecb_decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ct: *const ::std::os::raw::c_uchar,
            pt: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated CBC encryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param IV      The initial value (input/output)\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_cbc_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            IV: *mut ::std::os::raw::c_uchar,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated CBC decryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param IV      The initial value (input/output)\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_cbc_decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ct: *const ::std::os::raw::c_uchar,
            pt: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            IV: *mut ::std::os::raw::c_uchar,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated CTR encryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param IV      The initial value (input/output)\n@param mode    little or big endian counter (mode=0 or mode=1)\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_ctr_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            IV: *mut ::std::os::raw::c_uchar,
            mode: ::std::os::raw::c_int,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated LRW\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param IV      The initial value (input/output)\n@param tweak   The LRW tweak\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_lrw_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            IV: *mut ::std::os::raw::c_uchar,
            tweak: *const ::std::os::raw::c_uchar,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated LRW\n@param ct      Ciphertext\n@param pt      Plaintext\n@param blocks  The number of complete blocks to process\n@param IV      The initial value (input/output)\n@param tweak   The LRW tweak\n@param skey    The scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_lrw_decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ct: *const ::std::os::raw::c_uchar,
            pt: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            IV: *mut ::std::os::raw::c_uchar,
            tweak: *const ::std::os::raw::c_uchar,
            skey: *mut symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated CCM packet (one-shot)\n@param key        The secret key to use\n@param keylen     The length of the secret key (octets)\n@param uskey      A previously scheduled key [optional can be NULL]\n@param nonce      The session nonce [use once]\n@param noncelen   The length of the nonce\n@param header     The header for the session\n@param headerlen  The length of the header (octets)\n@param pt         [out] The plaintext\n@param ptlen      The length of the plaintext (octets)\n@param ct         [out] The ciphertext\n@param tag        [out] The destination tag\n@param taglen     [in/out] The max size and resulting size of the authentication tag\n@param direction  Encrypt or Decrypt direction (0 or 1)\n@return CRYPT_OK if successful"]
    pub accel_ccm_memory: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            uskey: *mut symmetric_key,
            nonce: *const ::std::os::raw::c_uchar,
            noncelen: ::std::os::raw::c_ulong,
            header: *const ::std::os::raw::c_uchar,
            headerlen: ::std::os::raw::c_ulong,
            pt: *mut ::std::os::raw::c_uchar,
            ptlen: ::std::os::raw::c_ulong,
            ct: *mut ::std::os::raw::c_uchar,
            tag: *mut ::std::os::raw::c_uchar,
            taglen: *mut ::std::os::raw::c_ulong,
            direction: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated GCM packet (one shot)\n@param key        The secret key\n@param keylen     The length of the secret key\n@param IV         The initialization vector\n@param IVlen      The length of the initialization vector\n@param adata      The additional authentication data (header)\n@param adatalen   The length of the adata\n@param pt         The plaintext\n@param ptlen      The length of the plaintext (ciphertext length is the same)\n@param ct         The ciphertext\n@param tag        [out] The MAC tag\n@param taglen     [in/out] The MAC tag length\n@param direction  Encrypt or Decrypt mode (GCM_ENCRYPT or GCM_DECRYPT)\n@return CRYPT_OK on success"]
    pub accel_gcm_memory: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            IV: *const ::std::os::raw::c_uchar,
            IVlen: ::std::os::raw::c_ulong,
            adata: *const ::std::os::raw::c_uchar,
            adatalen: ::std::os::raw::c_ulong,
            pt: *mut ::std::os::raw::c_uchar,
            ptlen: ::std::os::raw::c_ulong,
            ct: *mut ::std::os::raw::c_uchar,
            tag: *mut ::std::os::raw::c_uchar,
            taglen: *mut ::std::os::raw::c_ulong,
            direction: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated one shot LTC_OMAC\n@param key            The secret key\n@param keylen         The key length (octets)\n@param in             The message\n@param inlen          Length of message (octets)\n@param out            [out] Destination for tag\n@param outlen         [in/out] Initial and final size of out\n@return CRYPT_OK on success"]
    pub omac_memory: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated one shot XCBC\n@param key            The secret key\n@param keylen         The key length (octets)\n@param in             The message\n@param inlen          Length of message (octets)\n@param out            [out] Destination for tag\n@param outlen         [in/out] Initial and final size of out\n@return CRYPT_OK on success"]
    pub xcbc_memory: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated one shot F9\n@param key            The secret key\n@param keylen         The key length (octets)\n@param in             The message\n@param inlen          Length of message (octets)\n@param out            [out] Destination for tag\n@param outlen         [in/out] Initial and final size of out\n@return CRYPT_OK on success\n@remark Requires manual padding"]
    pub f9_memory: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated XTS encryption\n@param pt      Plaintext\n@param ct      Ciphertext\n@param blocks  The number of complete blocks to process\n@param tweak   The 128-bit encryption tweak (input/output).\nThe tweak should not be encrypted on input, but\nnext tweak will be copied encrypted on output.\n@param skey1   The first scheduled key context\n@param skey2   The second scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_xts_encrypt: ::std::option::Option<
        unsafe extern "C" fn(
            pt: *const ::std::os::raw::c_uchar,
            ct: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            tweak: *mut ::std::os::raw::c_uchar,
            skey1: *const symmetric_key,
            skey2: *const symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Accelerated XTS decryption\n@param ct      Ciphertext\n@param pt      Plaintext\n@param blocks  The number of complete blocks to process\n@param tweak   The 128-bit encryption tweak (input/output).\nThe tweak should not be encrypted on input, but\nnext tweak will be copied encrypted on output.\n@param skey1   The first scheduled key context\n@param skey2   The second scheduled key context\n@return CRYPT_OK if successful"]
    pub accel_xts_decrypt: ::std::option::Option<
        unsafe extern "C" fn(
            ct: *const ::std::os::raw::c_uchar,
            pt: *mut ::std::os::raw::c_uchar,
            blocks: ::std::os::raw::c_ulong,
            tweak: *mut ::std::os::raw::c_uchar,
            skey1: *const symmetric_key,
            skey2: *const symmetric_key,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_cipher_descriptor"][::std::mem::size_of::<ltc_cipher_descriptor>() - 192usize];
    ["Alignment of ltc_cipher_descriptor"]
        [::std::mem::align_of::<ltc_cipher_descriptor>() - 8usize];
    ["Offset of field: ltc_cipher_descriptor::name"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, name) - 0usize];
    ["Offset of field: ltc_cipher_descriptor::ID"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, ID) - 8usize];
    ["Offset of field: ltc_cipher_descriptor::min_key_length"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, min_key_length) - 12usize];
    ["Offset of field: ltc_cipher_descriptor::max_key_length"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, max_key_length) - 16usize];
    ["Offset of field: ltc_cipher_descriptor::block_length"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, block_length) - 20usize];
    ["Offset of field: ltc_cipher_descriptor::default_rounds"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, default_rounds) - 24usize];
    ["Offset of field: ltc_cipher_descriptor::setup"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, setup) - 32usize];
    ["Offset of field: ltc_cipher_descriptor::ecb_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, ecb_encrypt) - 40usize];
    ["Offset of field: ltc_cipher_descriptor::ecb_decrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, ecb_decrypt) - 48usize];
    ["Offset of field: ltc_cipher_descriptor::test"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, test) - 56usize];
    ["Offset of field: ltc_cipher_descriptor::done"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, done) - 64usize];
    ["Offset of field: ltc_cipher_descriptor::keysize"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, keysize) - 72usize];
    ["Offset of field: ltc_cipher_descriptor::accel_ecb_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_ecb_encrypt) - 80usize];
    ["Offset of field: ltc_cipher_descriptor::accel_ecb_decrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_ecb_decrypt) - 88usize];
    ["Offset of field: ltc_cipher_descriptor::accel_cbc_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_cbc_encrypt) - 96usize];
    ["Offset of field: ltc_cipher_descriptor::accel_cbc_decrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_cbc_decrypt) - 104usize];
    ["Offset of field: ltc_cipher_descriptor::accel_ctr_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_ctr_encrypt) - 112usize];
    ["Offset of field: ltc_cipher_descriptor::accel_lrw_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_lrw_encrypt) - 120usize];
    ["Offset of field: ltc_cipher_descriptor::accel_lrw_decrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_lrw_decrypt) - 128usize];
    ["Offset of field: ltc_cipher_descriptor::accel_ccm_memory"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_ccm_memory) - 136usize];
    ["Offset of field: ltc_cipher_descriptor::accel_gcm_memory"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_gcm_memory) - 144usize];
    ["Offset of field: ltc_cipher_descriptor::omac_memory"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, omac_memory) - 152usize];
    ["Offset of field: ltc_cipher_descriptor::xcbc_memory"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, xcbc_memory) - 160usize];
    ["Offset of field: ltc_cipher_descriptor::f9_memory"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, f9_memory) - 168usize];
    ["Offset of field: ltc_cipher_descriptor::accel_xts_encrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_xts_encrypt) - 176usize];
    ["Offset of field: ltc_cipher_descriptor::accel_xts_decrypt"]
        [::std::mem::offset_of!(ltc_cipher_descriptor, accel_xts_decrypt) - 184usize];
};
extern "C" {
    pub static mut cipher_descriptor: [ltc_cipher_descriptor; 0usize];
}
extern "C" {
    pub fn blowfish_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blowfish_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blowfish_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blowfish_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blowfish_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn blowfish_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blowfish_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn rc5_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc5_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc5_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc5_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc5_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn rc5_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rc5_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn rc6_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc6_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc6_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc6_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc6_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn rc6_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rc6_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn rc2_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc2_setup_ex(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        bits: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc2_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc2_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc2_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc2_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn rc2_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rc2_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn saferp_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn saferp_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn saferp_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn saferp_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn saferp_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn saferp_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static saferp_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn safer_k64_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_sk64_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_k128_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_sk128_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_k64_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_sk64_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_sk128_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn safer_64_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safer_128_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static safer_k64_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static safer_k128_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static safer_sk64_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static safer_sk128_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn aes_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn aes_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_enc_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_enc_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_enc_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aes_enc_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn aes_enc_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static aes_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static aes_enc_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn rijndael_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn rijndael_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_enc_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_enc_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rijndael_enc_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn rijndael_enc_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rijndael_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static rijndael_enc_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn xtea_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xtea_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xtea_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xtea_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xtea_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn xtea_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static xtea_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn twofish_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn twofish_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn twofish_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn twofish_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn twofish_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn twofish_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static twofish_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn des_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn des_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn desx_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn desx_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn desx_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn desx_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn desx_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn desx_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des3_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des3_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des3_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des3_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn des3_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn des3_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static des_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static desx_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub static des3_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn sm4_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm4_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm4_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm4_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sm4_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn sm4_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sm4_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn cast5_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cast5_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cast5_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cast5_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cast5_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn cast5_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static cast5_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn noekeon_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noekeon_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noekeon_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noekeon_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn noekeon_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn noekeon_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static noekeon_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn skipjack_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipjack_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipjack_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipjack_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn skipjack_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn skipjack_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static skipjack_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn khazad_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn khazad_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn khazad_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn khazad_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn khazad_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn khazad_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static khazad_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn anubis_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anubis_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anubis_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anubis_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn anubis_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn anubis_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static anubis_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn kseed_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kseed_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kseed_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kseed_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kseed_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn kseed_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static kseed_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn kasumi_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kasumi_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kasumi_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kasumi_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn kasumi_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn kasumi_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static kasumi_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn multi2_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multi2_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multi2_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multi2_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn multi2_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn multi2_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static multi2_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn camellia_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn camellia_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn camellia_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn camellia_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn camellia_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn camellia_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static camellia_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn idea_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idea_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idea_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idea_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn idea_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn idea_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static idea_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn serpent_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serpent_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serpent_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serpent_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serpent_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn serpent_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static serpent_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn tea_setup(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        skey: *mut symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tea_ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tea_ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        skey: *const symmetric_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tea_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tea_done(skey: *mut symmetric_key);
}
extern "C" {
    pub fn tea_keysize(keysize: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static tea_desc: ltc_cipher_descriptor;
}
extern "C" {
    pub fn ecb_start(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        ecb: *mut symmetric_ECB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ecb: *mut symmetric_ECB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ecb: *mut symmetric_ECB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecb_done(ecb: *mut symmetric_ECB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        cfb: *mut symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_start_ex(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        cfb: *mut symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cfb: *mut symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cfb: *mut symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        cfb: *const symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cfb: *mut symmetric_CFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfb_done(cfb: *mut symmetric_CFB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        ofb: *mut symmetric_OFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ofb: *mut symmetric_OFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ofb: *mut symmetric_OFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        ofb: *const symmetric_OFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ofb: *mut symmetric_OFB,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ofb_done(ofb: *mut symmetric_OFB) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        cbc: *mut symmetric_CBC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cbc: *mut symmetric_CBC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cbc: *mut symmetric_CBC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        cbc: *const symmetric_CBC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        cbc: *mut symmetric_CBC,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cbc_done(cbc: *mut symmetric_CBC) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        ctr_mode: ::std::os::raw::c_int,
        ctr: *mut symmetric_CTR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ctr: *mut symmetric_CTR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ctr: *mut symmetric_CTR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        ctr: *const symmetric_CTR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        ctr: *mut symmetric_CTR,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_done(ctr: *mut symmetric_CTR) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctr_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        tweak: *const ::std::os::raw::c_uchar,
        num_rounds: ::std::os::raw::c_int,
        lrw: *mut symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        lrw: *mut symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        lrw: *mut symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        lrw: *const symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        lrw: *mut symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_done(lrw: *mut symmetric_LRW) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrw_process(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_int,
        lrw: *mut symmetric_LRW,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_start(
        cipher: ::std::os::raw::c_int,
        IV: *const ::std::os::raw::c_uchar,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        salt_key: *const ::std::os::raw::c_uchar,
        skeylen: ::std::os::raw::c_int,
        num_rounds: ::std::os::raw::c_int,
        f8: *mut symmetric_F8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        f8: *mut symmetric_F8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        f8: *mut symmetric_F8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_getiv(
        IV: *mut ::std::os::raw::c_uchar,
        len: *mut ::std::os::raw::c_ulong,
        f8: *const symmetric_F8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_setiv(
        IV: *const ::std::os::raw::c_uchar,
        len: ::std::os::raw::c_ulong,
        f8: *mut symmetric_F8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_done(f8: *mut symmetric_F8) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f8_test_mode() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct symmetric_xts {
    pub key1: symmetric_key,
    pub key2: symmetric_key,
    pub cipher: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of symmetric_xts"][::std::mem::size_of::<symmetric_xts>() - 8520usize];
    ["Alignment of symmetric_xts"][::std::mem::align_of::<symmetric_xts>() - 8usize];
    ["Offset of field: symmetric_xts::key1"][::std::mem::offset_of!(symmetric_xts, key1) - 0usize];
    ["Offset of field: symmetric_xts::key2"]
        [::std::mem::offset_of!(symmetric_xts, key2) - 4256usize];
    ["Offset of field: symmetric_xts::cipher"]
        [::std::mem::offset_of!(symmetric_xts, cipher) - 8512usize];
};
extern "C" {
    pub fn xts_start(
        cipher: ::std::os::raw::c_int,
        key1: *const ::std::os::raw::c_uchar,
        key2: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        num_rounds: ::std::os::raw::c_int,
        xts: *mut symmetric_xts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xts_encrypt(
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tweak: *mut ::std::os::raw::c_uchar,
        xts: *const symmetric_xts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xts_decrypt(
        ct: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        tweak: *mut ::std::os::raw::c_uchar,
        xts: *const symmetric_xts,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xts_done(xts: *mut symmetric_xts);
}
extern "C" {
    pub fn xts_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xts_mult_x(I: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn find_cipher(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_cipher_any(
        name: *const ::std::os::raw::c_char,
        blocklen: ::std::os::raw::c_int,
        keylen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_cipher_id(ID: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_cipher(cipher: *const ltc_cipher_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_cipher(cipher: *const ltc_cipher_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_all_ciphers() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cipher_is_valid(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chacha_state {
    pub input: [ulong32; 16usize],
    pub kstream: [::std::os::raw::c_uchar; 64usize],
    pub ksleft: ::std::os::raw::c_ulong,
    pub ivlen: ::std::os::raw::c_ulong,
    pub rounds: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chacha_state"][::std::mem::size_of::<chacha_state>() - 152usize];
    ["Alignment of chacha_state"][::std::mem::align_of::<chacha_state>() - 8usize];
    ["Offset of field: chacha_state::input"][::std::mem::offset_of!(chacha_state, input) - 0usize];
    ["Offset of field: chacha_state::kstream"]
        [::std::mem::offset_of!(chacha_state, kstream) - 64usize];
    ["Offset of field: chacha_state::ksleft"]
        [::std::mem::offset_of!(chacha_state, ksleft) - 128usize];
    ["Offset of field: chacha_state::ivlen"]
        [::std::mem::offset_of!(chacha_state, ivlen) - 136usize];
    ["Offset of field: chacha_state::rounds"]
        [::std::mem::offset_of!(chacha_state, rounds) - 144usize];
};
extern "C" {
    pub fn chacha_setup(
        st: *mut chacha_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_ivctr32(
        st: *mut chacha_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        counter: ulong32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_ivctr64(
        st: *mut chacha_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        counter: ulong64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_crypt(
        st: *mut chacha_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_keystream(
        st: *mut chacha_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_done(st: *mut chacha_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        counter: ulong64,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct salsa20_state {
    pub input: [ulong32; 16usize],
    pub kstream: [::std::os::raw::c_uchar; 64usize],
    pub ksleft: ::std::os::raw::c_ulong,
    pub ivlen: ::std::os::raw::c_ulong,
    pub rounds: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of salsa20_state"][::std::mem::size_of::<salsa20_state>() - 152usize];
    ["Alignment of salsa20_state"][::std::mem::align_of::<salsa20_state>() - 8usize];
    ["Offset of field: salsa20_state::input"]
        [::std::mem::offset_of!(salsa20_state, input) - 0usize];
    ["Offset of field: salsa20_state::kstream"]
        [::std::mem::offset_of!(salsa20_state, kstream) - 64usize];
    ["Offset of field: salsa20_state::ksleft"]
        [::std::mem::offset_of!(salsa20_state, ksleft) - 128usize];
    ["Offset of field: salsa20_state::ivlen"]
        [::std::mem::offset_of!(salsa20_state, ivlen) - 136usize];
    ["Offset of field: salsa20_state::rounds"]
        [::std::mem::offset_of!(salsa20_state, rounds) - 144usize];
};
extern "C" {
    pub fn salsa20_setup(
        st: *mut salsa20_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_ivctr64(
        st: *mut salsa20_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        counter: ulong64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_crypt(
        st: *mut salsa20_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_keystream(
        st: *mut salsa20_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_done(st: *mut salsa20_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn salsa20_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        counter: ulong64,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsalsa20_setup(
        st: *mut salsa20_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsalsa20_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsalsa20_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sosemanuk_state {
    pub kc: [ulong32; 100usize],
    pub s00: ulong32,
    pub s01: ulong32,
    pub s02: ulong32,
    pub s03: ulong32,
    pub s04: ulong32,
    pub s05: ulong32,
    pub s06: ulong32,
    pub s07: ulong32,
    pub s08: ulong32,
    pub s09: ulong32,
    pub r1: ulong32,
    pub r2: ulong32,
    pub buf: [::std::os::raw::c_uchar; 80usize],
    pub ptr: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sosemanuk_state"][::std::mem::size_of::<sosemanuk_state>() - 532usize];
    ["Alignment of sosemanuk_state"][::std::mem::align_of::<sosemanuk_state>() - 4usize];
    ["Offset of field: sosemanuk_state::kc"][::std::mem::offset_of!(sosemanuk_state, kc) - 0usize];
    ["Offset of field: sosemanuk_state::s00"]
        [::std::mem::offset_of!(sosemanuk_state, s00) - 400usize];
    ["Offset of field: sosemanuk_state::s01"]
        [::std::mem::offset_of!(sosemanuk_state, s01) - 404usize];
    ["Offset of field: sosemanuk_state::s02"]
        [::std::mem::offset_of!(sosemanuk_state, s02) - 408usize];
    ["Offset of field: sosemanuk_state::s03"]
        [::std::mem::offset_of!(sosemanuk_state, s03) - 412usize];
    ["Offset of field: sosemanuk_state::s04"]
        [::std::mem::offset_of!(sosemanuk_state, s04) - 416usize];
    ["Offset of field: sosemanuk_state::s05"]
        [::std::mem::offset_of!(sosemanuk_state, s05) - 420usize];
    ["Offset of field: sosemanuk_state::s06"]
        [::std::mem::offset_of!(sosemanuk_state, s06) - 424usize];
    ["Offset of field: sosemanuk_state::s07"]
        [::std::mem::offset_of!(sosemanuk_state, s07) - 428usize];
    ["Offset of field: sosemanuk_state::s08"]
        [::std::mem::offset_of!(sosemanuk_state, s08) - 432usize];
    ["Offset of field: sosemanuk_state::s09"]
        [::std::mem::offset_of!(sosemanuk_state, s09) - 436usize];
    ["Offset of field: sosemanuk_state::r1"]
        [::std::mem::offset_of!(sosemanuk_state, r1) - 440usize];
    ["Offset of field: sosemanuk_state::r2"]
        [::std::mem::offset_of!(sosemanuk_state, r2) - 444usize];
    ["Offset of field: sosemanuk_state::buf"]
        [::std::mem::offset_of!(sosemanuk_state, buf) - 448usize];
    ["Offset of field: sosemanuk_state::ptr"]
        [::std::mem::offset_of!(sosemanuk_state, ptr) - 528usize];
};
extern "C" {
    pub fn sosemanuk_setup(
        st: *mut sosemanuk_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_setiv(
        st: *mut sosemanuk_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_crypt(
        st: *mut sosemanuk_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_keystream(
        st: *mut sosemanuk_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_done(st: *mut sosemanuk_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sosemanuk_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rabbit_ctx {
    pub x: [ulong32; 8usize],
    pub c: [ulong32; 8usize],
    pub carry: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rabbit_ctx"][::std::mem::size_of::<rabbit_ctx>() - 68usize];
    ["Alignment of rabbit_ctx"][::std::mem::align_of::<rabbit_ctx>() - 4usize];
    ["Offset of field: rabbit_ctx::x"][::std::mem::offset_of!(rabbit_ctx, x) - 0usize];
    ["Offset of field: rabbit_ctx::c"][::std::mem::offset_of!(rabbit_ctx, c) - 32usize];
    ["Offset of field: rabbit_ctx::carry"][::std::mem::offset_of!(rabbit_ctx, carry) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rabbit_state {
    pub master_ctx: rabbit_ctx,
    pub work_ctx: rabbit_ctx,
    pub block: [::std::os::raw::c_uchar; 16usize],
    pub unused: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rabbit_state"][::std::mem::size_of::<rabbit_state>() - 156usize];
    ["Alignment of rabbit_state"][::std::mem::align_of::<rabbit_state>() - 4usize];
    ["Offset of field: rabbit_state::master_ctx"]
        [::std::mem::offset_of!(rabbit_state, master_ctx) - 0usize];
    ["Offset of field: rabbit_state::work_ctx"]
        [::std::mem::offset_of!(rabbit_state, work_ctx) - 68usize];
    ["Offset of field: rabbit_state::block"]
        [::std::mem::offset_of!(rabbit_state, block) - 136usize];
    ["Offset of field: rabbit_state::unused"]
        [::std::mem::offset_of!(rabbit_state, unused) - 152usize];
};
extern "C" {
    pub fn rabbit_setup(
        st: *mut rabbit_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_setiv(
        st: *mut rabbit_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_crypt(
        st: *mut rabbit_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_keystream(
        st: *mut rabbit_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_done(st: *mut rabbit_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rabbit_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc4_state {
    pub x: ::std::os::raw::c_uint,
    pub y: ::std::os::raw::c_uint,
    pub buf: [::std::os::raw::c_uchar; 256usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc4_state"][::std::mem::size_of::<rc4_state>() - 264usize];
    ["Alignment of rc4_state"][::std::mem::align_of::<rc4_state>() - 4usize];
    ["Offset of field: rc4_state::x"][::std::mem::offset_of!(rc4_state, x) - 0usize];
    ["Offset of field: rc4_state::y"][::std::mem::offset_of!(rc4_state, y) - 4usize];
    ["Offset of field: rc4_state::buf"][::std::mem::offset_of!(rc4_state, buf) - 8usize];
};
extern "C" {
    pub fn rc4_stream_setup(
        st: *mut rc4_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_stream_crypt(
        st: *mut rc4_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_stream_keystream(
        st: *mut rc4_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_stream_done(st: *mut rc4_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_stream_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_stream_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sober128_state {
    pub R: [ulong32; 17usize],
    pub initR: [ulong32; 17usize],
    pub konst: ulong32,
    pub sbuf: ulong32,
    pub nbuf: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sober128_state"][::std::mem::size_of::<sober128_state>() - 148usize];
    ["Alignment of sober128_state"][::std::mem::align_of::<sober128_state>() - 4usize];
    ["Offset of field: sober128_state::R"][::std::mem::offset_of!(sober128_state, R) - 0usize];
    ["Offset of field: sober128_state::initR"]
        [::std::mem::offset_of!(sober128_state, initR) - 68usize];
    ["Offset of field: sober128_state::konst"]
        [::std::mem::offset_of!(sober128_state, konst) - 136usize];
    ["Offset of field: sober128_state::sbuf"]
        [::std::mem::offset_of!(sober128_state, sbuf) - 140usize];
    ["Offset of field: sober128_state::nbuf"]
        [::std::mem::offset_of!(sober128_state, nbuf) - 144usize];
};
extern "C" {
    pub fn sober128_stream_setup(
        st: *mut sober128_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_setiv(
        st: *mut sober128_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_crypt(
        st: *mut sober128_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_keystream(
        st: *mut sober128_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_done(st: *mut sober128_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_stream_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        datain: *const ::std::os::raw::c_uchar,
        datalen: ::std::os::raw::c_ulong,
        dataout: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha3_state {
    pub saved: ulong64,
    pub s: [ulong64; 25usize],
    pub sb: [::std::os::raw::c_uchar; 200usize],
    pub byte_index: ::std::os::raw::c_ushort,
    pub word_index: ::std::os::raw::c_ushort,
    pub capacity_words: ::std::os::raw::c_ushort,
    pub xof_flag: ::std::os::raw::c_ushort,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sha3_state"][::std::mem::size_of::<sha3_state>() - 416usize];
    ["Alignment of sha3_state"][::std::mem::align_of::<sha3_state>() - 8usize];
    ["Offset of field: sha3_state::saved"][::std::mem::offset_of!(sha3_state, saved) - 0usize];
    ["Offset of field: sha3_state::s"][::std::mem::offset_of!(sha3_state, s) - 8usize];
    ["Offset of field: sha3_state::sb"][::std::mem::offset_of!(sha3_state, sb) - 208usize];
    ["Offset of field: sha3_state::byte_index"]
        [::std::mem::offset_of!(sha3_state, byte_index) - 408usize];
    ["Offset of field: sha3_state::word_index"]
        [::std::mem::offset_of!(sha3_state, word_index) - 410usize];
    ["Offset of field: sha3_state::capacity_words"]
        [::std::mem::offset_of!(sha3_state, capacity_words) - 412usize];
    ["Offset of field: sha3_state::xof_flag"]
        [::std::mem::offset_of!(sha3_state, xof_flag) - 414usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha512_state {
    pub length: ulong64,
    pub state: [ulong64; 8usize],
    pub curlen: ::std::os::raw::c_ulong,
    pub buf: [::std::os::raw::c_uchar; 128usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sha512_state"][::std::mem::size_of::<sha512_state>() - 208usize];
    ["Alignment of sha512_state"][::std::mem::align_of::<sha512_state>() - 8usize];
    ["Offset of field: sha512_state::length"]
        [::std::mem::offset_of!(sha512_state, length) - 0usize];
    ["Offset of field: sha512_state::state"][::std::mem::offset_of!(sha512_state, state) - 8usize];
    ["Offset of field: sha512_state::curlen"]
        [::std::mem::offset_of!(sha512_state, curlen) - 72usize];
    ["Offset of field: sha512_state::buf"][::std::mem::offset_of!(sha512_state, buf) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha256_state {
    pub length: ulong64,
    pub state: [ulong32; 8usize],
    pub curlen: ulong32,
    pub buf: [::std::os::raw::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sha256_state"][::std::mem::size_of::<sha256_state>() - 112usize];
    ["Alignment of sha256_state"][::std::mem::align_of::<sha256_state>() - 8usize];
    ["Offset of field: sha256_state::length"]
        [::std::mem::offset_of!(sha256_state, length) - 0usize];
    ["Offset of field: sha256_state::state"][::std::mem::offset_of!(sha256_state, state) - 8usize];
    ["Offset of field: sha256_state::curlen"]
        [::std::mem::offset_of!(sha256_state, curlen) - 40usize];
    ["Offset of field: sha256_state::buf"][::std::mem::offset_of!(sha256_state, buf) - 44usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sha1_state {
    pub length: ulong64,
    pub state: [ulong32; 5usize],
    pub curlen: ulong32,
    pub buf: [::std::os::raw::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sha1_state"][::std::mem::size_of::<sha1_state>() - 96usize];
    ["Alignment of sha1_state"][::std::mem::align_of::<sha1_state>() - 8usize];
    ["Offset of field: sha1_state::length"][::std::mem::offset_of!(sha1_state, length) - 0usize];
    ["Offset of field: sha1_state::state"][::std::mem::offset_of!(sha1_state, state) - 8usize];
    ["Offset of field: sha1_state::curlen"][::std::mem::offset_of!(sha1_state, curlen) - 28usize];
    ["Offset of field: sha1_state::buf"][::std::mem::offset_of!(sha1_state, buf) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct md5_state {
    pub length: ulong64,
    pub state: [ulong32; 4usize],
    pub curlen: ulong32,
    pub buf: [::std::os::raw::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of md5_state"][::std::mem::size_of::<md5_state>() - 96usize];
    ["Alignment of md5_state"][::std::mem::align_of::<md5_state>() - 8usize];
    ["Offset of field: md5_state::length"][::std::mem::offset_of!(md5_state, length) - 0usize];
    ["Offset of field: md5_state::state"][::std::mem::offset_of!(md5_state, state) - 8usize];
    ["Offset of field: md5_state::curlen"][::std::mem::offset_of!(md5_state, curlen) - 24usize];
    ["Offset of field: md5_state::buf"][::std::mem::offset_of!(md5_state, buf) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct md4_state {
    pub length: ulong64,
    pub state: [ulong32; 4usize],
    pub curlen: ulong32,
    pub buf: [::std::os::raw::c_uchar; 64usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of md4_state"][::std::mem::size_of::<md4_state>() - 96usize];
    ["Alignment of md4_state"][::std::mem::align_of::<md4_state>() - 8usize];
    ["Offset of field: md4_state::length"][::std::mem::offset_of!(md4_state, length) - 0usize];
    ["Offset of field: md4_state::state"][::std::mem::offset_of!(md4_state, state) - 8usize];
    ["Offset of field: md4_state::curlen"][::std::mem::offset_of!(md4_state, curlen) - 24usize];
    ["Offset of field: md4_state::buf"][::std::mem::offset_of!(md4_state, buf) - 28usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tiger_state {
    pub state: [ulong64; 3usize],
    pub length: ulong64,
    pub curlen: ::std::os::raw::c_ulong,
    pub passes: ::std::os::raw::c_ulong,
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub pad: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of tiger_state"][::std::mem::size_of::<tiger_state>() - 120usize];
    ["Alignment of tiger_state"][::std::mem::align_of::<tiger_state>() - 8usize];
    ["Offset of field: tiger_state::state"][::std::mem::offset_of!(tiger_state, state) - 0usize];
    ["Offset of field: tiger_state::length"][::std::mem::offset_of!(tiger_state, length) - 24usize];
    ["Offset of field: tiger_state::curlen"][::std::mem::offset_of!(tiger_state, curlen) - 32usize];
    ["Offset of field: tiger_state::passes"][::std::mem::offset_of!(tiger_state, passes) - 40usize];
    ["Offset of field: tiger_state::buf"][::std::mem::offset_of!(tiger_state, buf) - 48usize];
    ["Offset of field: tiger_state::pad"][::std::mem::offset_of!(tiger_state, pad) - 112usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct md2_state {
    pub chksum: [::std::os::raw::c_uchar; 16usize],
    pub X: [::std::os::raw::c_uchar; 48usize],
    pub buf: [::std::os::raw::c_uchar; 16usize],
    pub curlen: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of md2_state"][::std::mem::size_of::<md2_state>() - 88usize];
    ["Alignment of md2_state"][::std::mem::align_of::<md2_state>() - 8usize];
    ["Offset of field: md2_state::chksum"][::std::mem::offset_of!(md2_state, chksum) - 0usize];
    ["Offset of field: md2_state::X"][::std::mem::offset_of!(md2_state, X) - 16usize];
    ["Offset of field: md2_state::buf"][::std::mem::offset_of!(md2_state, buf) - 64usize];
    ["Offset of field: md2_state::curlen"][::std::mem::offset_of!(md2_state, curlen) - 80usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmd128_state {
    pub length: ulong64,
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ulong32,
    pub state: [ulong32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rmd128_state"][::std::mem::size_of::<rmd128_state>() - 96usize];
    ["Alignment of rmd128_state"][::std::mem::align_of::<rmd128_state>() - 8usize];
    ["Offset of field: rmd128_state::length"]
        [::std::mem::offset_of!(rmd128_state, length) - 0usize];
    ["Offset of field: rmd128_state::buf"][::std::mem::offset_of!(rmd128_state, buf) - 8usize];
    ["Offset of field: rmd128_state::curlen"]
        [::std::mem::offset_of!(rmd128_state, curlen) - 72usize];
    ["Offset of field: rmd128_state::state"][::std::mem::offset_of!(rmd128_state, state) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmd160_state {
    pub length: ulong64,
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ulong32,
    pub state: [ulong32; 5usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rmd160_state"][::std::mem::size_of::<rmd160_state>() - 96usize];
    ["Alignment of rmd160_state"][::std::mem::align_of::<rmd160_state>() - 8usize];
    ["Offset of field: rmd160_state::length"]
        [::std::mem::offset_of!(rmd160_state, length) - 0usize];
    ["Offset of field: rmd160_state::buf"][::std::mem::offset_of!(rmd160_state, buf) - 8usize];
    ["Offset of field: rmd160_state::curlen"]
        [::std::mem::offset_of!(rmd160_state, curlen) - 72usize];
    ["Offset of field: rmd160_state::state"][::std::mem::offset_of!(rmd160_state, state) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmd256_state {
    pub length: ulong64,
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ulong32,
    pub state: [ulong32; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rmd256_state"][::std::mem::size_of::<rmd256_state>() - 112usize];
    ["Alignment of rmd256_state"][::std::mem::align_of::<rmd256_state>() - 8usize];
    ["Offset of field: rmd256_state::length"]
        [::std::mem::offset_of!(rmd256_state, length) - 0usize];
    ["Offset of field: rmd256_state::buf"][::std::mem::offset_of!(rmd256_state, buf) - 8usize];
    ["Offset of field: rmd256_state::curlen"]
        [::std::mem::offset_of!(rmd256_state, curlen) - 72usize];
    ["Offset of field: rmd256_state::state"][::std::mem::offset_of!(rmd256_state, state) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rmd320_state {
    pub length: ulong64,
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ulong32,
    pub state: [ulong32; 10usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rmd320_state"][::std::mem::size_of::<rmd320_state>() - 120usize];
    ["Alignment of rmd320_state"][::std::mem::align_of::<rmd320_state>() - 8usize];
    ["Offset of field: rmd320_state::length"]
        [::std::mem::offset_of!(rmd320_state, length) - 0usize];
    ["Offset of field: rmd320_state::buf"][::std::mem::offset_of!(rmd320_state, buf) - 8usize];
    ["Offset of field: rmd320_state::curlen"]
        [::std::mem::offset_of!(rmd320_state, curlen) - 72usize];
    ["Offset of field: rmd320_state::state"][::std::mem::offset_of!(rmd320_state, state) - 76usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct whirlpool_state {
    pub length: ulong64,
    pub state: [ulong64; 8usize],
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of whirlpool_state"][::std::mem::size_of::<whirlpool_state>() - 144usize];
    ["Alignment of whirlpool_state"][::std::mem::align_of::<whirlpool_state>() - 8usize];
    ["Offset of field: whirlpool_state::length"]
        [::std::mem::offset_of!(whirlpool_state, length) - 0usize];
    ["Offset of field: whirlpool_state::state"]
        [::std::mem::offset_of!(whirlpool_state, state) - 8usize];
    ["Offset of field: whirlpool_state::buf"]
        [::std::mem::offset_of!(whirlpool_state, buf) - 72usize];
    ["Offset of field: whirlpool_state::curlen"]
        [::std::mem::offset_of!(whirlpool_state, curlen) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chc_state {
    pub length: ulong64,
    pub state: [::std::os::raw::c_uchar; 144usize],
    pub buf: [::std::os::raw::c_uchar; 144usize],
    pub curlen: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chc_state"][::std::mem::size_of::<chc_state>() - 304usize];
    ["Alignment of chc_state"][::std::mem::align_of::<chc_state>() - 8usize];
    ["Offset of field: chc_state::length"][::std::mem::offset_of!(chc_state, length) - 0usize];
    ["Offset of field: chc_state::state"][::std::mem::offset_of!(chc_state, state) - 8usize];
    ["Offset of field: chc_state::buf"][::std::mem::offset_of!(chc_state, buf) - 152usize];
    ["Offset of field: chc_state::curlen"][::std::mem::offset_of!(chc_state, curlen) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blake2s_state {
    pub h: [ulong32; 8usize],
    pub t: [ulong32; 2usize],
    pub f: [ulong32; 2usize],
    pub buf: [::std::os::raw::c_uchar; 64usize],
    pub curlen: ::std::os::raw::c_ulong,
    pub outlen: ::std::os::raw::c_ulong,
    pub last_node: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of blake2s_state"][::std::mem::size_of::<blake2s_state>() - 136usize];
    ["Alignment of blake2s_state"][::std::mem::align_of::<blake2s_state>() - 8usize];
    ["Offset of field: blake2s_state::h"][::std::mem::offset_of!(blake2s_state, h) - 0usize];
    ["Offset of field: blake2s_state::t"][::std::mem::offset_of!(blake2s_state, t) - 32usize];
    ["Offset of field: blake2s_state::f"][::std::mem::offset_of!(blake2s_state, f) - 40usize];
    ["Offset of field: blake2s_state::buf"][::std::mem::offset_of!(blake2s_state, buf) - 48usize];
    ["Offset of field: blake2s_state::curlen"]
        [::std::mem::offset_of!(blake2s_state, curlen) - 112usize];
    ["Offset of field: blake2s_state::outlen"]
        [::std::mem::offset_of!(blake2s_state, outlen) - 120usize];
    ["Offset of field: blake2s_state::last_node"]
        [::std::mem::offset_of!(blake2s_state, last_node) - 128usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct blake2b_state {
    pub h: [ulong64; 8usize],
    pub t: [ulong64; 2usize],
    pub f: [ulong64; 2usize],
    pub buf: [::std::os::raw::c_uchar; 128usize],
    pub curlen: ::std::os::raw::c_ulong,
    pub outlen: ::std::os::raw::c_ulong,
    pub last_node: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of blake2b_state"][::std::mem::size_of::<blake2b_state>() - 248usize];
    ["Alignment of blake2b_state"][::std::mem::align_of::<blake2b_state>() - 8usize];
    ["Offset of field: blake2b_state::h"][::std::mem::offset_of!(blake2b_state, h) - 0usize];
    ["Offset of field: blake2b_state::t"][::std::mem::offset_of!(blake2b_state, t) - 64usize];
    ["Offset of field: blake2b_state::f"][::std::mem::offset_of!(blake2b_state, f) - 80usize];
    ["Offset of field: blake2b_state::buf"][::std::mem::offset_of!(blake2b_state, buf) - 96usize];
    ["Offset of field: blake2b_state::curlen"]
        [::std::mem::offset_of!(blake2b_state, curlen) - 224usize];
    ["Offset of field: blake2b_state::outlen"]
        [::std::mem::offset_of!(blake2b_state, outlen) - 232usize];
    ["Offset of field: blake2b_state::last_node"]
        [::std::mem::offset_of!(blake2b_state, last_node) - 240usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union Hash_state {
    pub dummy: [::std::os::raw::c_char; 1usize],
    pub chc: chc_state,
    pub whirlpool: whirlpool_state,
    pub sha3: sha3_state,
    pub sha512: sha512_state,
    pub sha256: sha256_state,
    pub sha1: sha1_state,
    pub md5: md5_state,
    pub md4: md4_state,
    pub md2: md2_state,
    pub tiger: tiger_state,
    pub rmd128: rmd128_state,
    pub rmd160: rmd160_state,
    pub rmd256: rmd256_state,
    pub rmd320: rmd320_state,
    pub blake2s: blake2s_state,
    pub blake2b: blake2b_state,
    pub data: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hash_state"][::std::mem::size_of::<Hash_state>() - 416usize];
    ["Alignment of Hash_state"][::std::mem::align_of::<Hash_state>() - 8usize];
    ["Offset of field: Hash_state::dummy"][::std::mem::offset_of!(Hash_state, dummy) - 0usize];
    ["Offset of field: Hash_state::chc"][::std::mem::offset_of!(Hash_state, chc) - 0usize];
    ["Offset of field: Hash_state::whirlpool"]
        [::std::mem::offset_of!(Hash_state, whirlpool) - 0usize];
    ["Offset of field: Hash_state::sha3"][::std::mem::offset_of!(Hash_state, sha3) - 0usize];
    ["Offset of field: Hash_state::sha512"][::std::mem::offset_of!(Hash_state, sha512) - 0usize];
    ["Offset of field: Hash_state::sha256"][::std::mem::offset_of!(Hash_state, sha256) - 0usize];
    ["Offset of field: Hash_state::sha1"][::std::mem::offset_of!(Hash_state, sha1) - 0usize];
    ["Offset of field: Hash_state::md5"][::std::mem::offset_of!(Hash_state, md5) - 0usize];
    ["Offset of field: Hash_state::md4"][::std::mem::offset_of!(Hash_state, md4) - 0usize];
    ["Offset of field: Hash_state::md2"][::std::mem::offset_of!(Hash_state, md2) - 0usize];
    ["Offset of field: Hash_state::tiger"][::std::mem::offset_of!(Hash_state, tiger) - 0usize];
    ["Offset of field: Hash_state::rmd128"][::std::mem::offset_of!(Hash_state, rmd128) - 0usize];
    ["Offset of field: Hash_state::rmd160"][::std::mem::offset_of!(Hash_state, rmd160) - 0usize];
    ["Offset of field: Hash_state::rmd256"][::std::mem::offset_of!(Hash_state, rmd256) - 0usize];
    ["Offset of field: Hash_state::rmd320"][::std::mem::offset_of!(Hash_state, rmd320) - 0usize];
    ["Offset of field: Hash_state::blake2s"][::std::mem::offset_of!(Hash_state, blake2s) - 0usize];
    ["Offset of field: Hash_state::blake2b"][::std::mem::offset_of!(Hash_state, blake2b) - 0usize];
    ["Offset of field: Hash_state::data"][::std::mem::offset_of!(Hash_state, data) - 0usize];
};
pub type hash_state = Hash_state;
#[doc = " hash descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_hash_descriptor {
    #[doc = " name of hash"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " internal ID"]
    pub ID: ::std::os::raw::c_uchar,
    #[doc = " Size of digest in octets"]
    pub hashsize: ::std::os::raw::c_ulong,
    #[doc = " Input block size in octets"]
    pub blocksize: ::std::os::raw::c_ulong,
    #[doc = " ASN.1 OID"]
    pub OID: [::std::os::raw::c_ulong; 16usize],
    #[doc = " Length of DER encoding"]
    pub OIDlen: ::std::os::raw::c_ulong,
    #[doc = " Init a hash state\n@param hash   The hash to initialize\n@return CRYPT_OK if successful"]
    pub init:
        ::std::option::Option<unsafe extern "C" fn(hash: *mut hash_state) -> ::std::os::raw::c_int>,
    #[doc = " Process a block of data\n@param hash   The hash state\n@param in     The data to hash\n@param inlen  The length of the data (octets)\n@return CRYPT_OK if successful"]
    pub process: ::std::option::Option<
        unsafe extern "C" fn(
            hash: *mut hash_state,
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Produce the digest and store it\n@param hash   The hash state\n@param out    [out] The destination of the digest\n@return CRYPT_OK if successful"]
    pub done: ::std::option::Option<
        unsafe extern "C" fn(
            hash: *mut hash_state,
            out: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Self-test\n@return CRYPT_OK if successful, CRYPT_NOP if self-tests have been disabled"]
    pub test: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    pub hmac_block: ::std::option::Option<
        unsafe extern "C" fn(
            key: *const ::std::os::raw::c_uchar,
            keylen: ::std::os::raw::c_ulong,
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_hash_descriptor"][::std::mem::size_of::<ltc_hash_descriptor>() - 208usize];
    ["Alignment of ltc_hash_descriptor"][::std::mem::align_of::<ltc_hash_descriptor>() - 8usize];
    ["Offset of field: ltc_hash_descriptor::name"]
        [::std::mem::offset_of!(ltc_hash_descriptor, name) - 0usize];
    ["Offset of field: ltc_hash_descriptor::ID"]
        [::std::mem::offset_of!(ltc_hash_descriptor, ID) - 8usize];
    ["Offset of field: ltc_hash_descriptor::hashsize"]
        [::std::mem::offset_of!(ltc_hash_descriptor, hashsize) - 16usize];
    ["Offset of field: ltc_hash_descriptor::blocksize"]
        [::std::mem::offset_of!(ltc_hash_descriptor, blocksize) - 24usize];
    ["Offset of field: ltc_hash_descriptor::OID"]
        [::std::mem::offset_of!(ltc_hash_descriptor, OID) - 32usize];
    ["Offset of field: ltc_hash_descriptor::OIDlen"]
        [::std::mem::offset_of!(ltc_hash_descriptor, OIDlen) - 160usize];
    ["Offset of field: ltc_hash_descriptor::init"]
        [::std::mem::offset_of!(ltc_hash_descriptor, init) - 168usize];
    ["Offset of field: ltc_hash_descriptor::process"]
        [::std::mem::offset_of!(ltc_hash_descriptor, process) - 176usize];
    ["Offset of field: ltc_hash_descriptor::done"]
        [::std::mem::offset_of!(ltc_hash_descriptor, done) - 184usize];
    ["Offset of field: ltc_hash_descriptor::test"]
        [::std::mem::offset_of!(ltc_hash_descriptor, test) - 192usize];
    ["Offset of field: ltc_hash_descriptor::hmac_block"]
        [::std::mem::offset_of!(ltc_hash_descriptor, hmac_block) - 200usize];
};
extern "C" {
    pub static mut hash_descriptor: [ltc_hash_descriptor; 0usize];
}
extern "C" {
    pub fn chc_register(cipher: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chc_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chc_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chc_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chc_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static chc_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn whirlpool_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whirlpool_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whirlpool_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn whirlpool_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static whirlpool_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha3_512_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_384_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_224_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_512_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha3_512_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha3_384_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha3_384_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha3_256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha3_256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha3_224_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha3_224_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha3_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_shake_init(
        md: *mut hash_state,
        num: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_shake_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_shake_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha3_shake_memory(
        num: ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *const ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static keccak_512_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn keccak_512_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static keccak_384_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn keccak_384_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static keccak_256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn keccak_256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static keccak_224_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn keccak_224_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn keccak_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha512_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha384_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha384_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha384_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha384_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha512_256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_256_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha512_256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha512_224_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_224_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha512_224_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha512_224_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha256_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha256_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha224_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha224_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha224_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha224_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn sha1_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha1_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha1_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sha1_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sha1_desc: ltc_hash_descriptor;
}
extern "C" {
    pub static blake2s_256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2s_256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2s_224_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2s_224_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_224_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2s_160_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2s_160_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_160_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2s_128_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2s_128_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_128_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_init(
        md: *mut hash_state,
        outlen: ::std::os::raw::c_ulong,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2s_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2b_512_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2b_512_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_512_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2b_384_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2b_384_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_384_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2b_256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2b_256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static blake2b_160_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn blake2b_160_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_160_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_init(
        md: *mut hash_state,
        outlen: ::std::os::raw::c_ulong,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2b_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md5_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md5_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md5_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md5_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static md5_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn md4_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md4_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md4_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md4_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static md4_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn md2_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md2_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md2_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn md2_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static md2_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn tiger_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger_init_ex(
        md: *mut hash_state,
        passes: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger2_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger2_init_ex(
        md: *mut hash_state,
        passes: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tiger2_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static tiger_desc: ltc_hash_descriptor;
}
extern "C" {
    pub static tiger2_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn rmd128_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd128_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd128_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd128_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rmd128_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn rmd160_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd160_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd160_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd160_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rmd160_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn rmd256_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd256_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd256_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd256_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rmd256_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn rmd320_init(md: *mut hash_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd320_process(
        md: *mut hash_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd320_done(
        md: *mut hash_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmd320_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rmd320_desc: ltc_hash_descriptor;
}
extern "C" {
    pub fn find_hash(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_hash_id(ID: ::std::os::raw::c_uchar) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_hash_oid(
        ID: *const ::std::os::raw::c_ulong,
        IDlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_hash_any(
        name: *const ::std::os::raw::c_char,
        digestlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_hash(hash: *const ltc_hash_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_hash(hash: *const ltc_hash_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_all_hashes() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_is_valid(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_memory(
        hash: ::std::os::raw::c_int,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_memory_multi(
        hash: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_filehandle(
        hash: ::std::os::raw::c_int,
        in_: *mut FILE,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hash_file(
        hash: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Hmac_state {
    pub md: hash_state,
    pub hash: ::std::os::raw::c_int,
    pub key: [::std::os::raw::c_uchar; 144usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Hmac_state"][::std::mem::size_of::<Hmac_state>() - 568usize];
    ["Alignment of Hmac_state"][::std::mem::align_of::<Hmac_state>() - 8usize];
    ["Offset of field: Hmac_state::md"][::std::mem::offset_of!(Hmac_state, md) - 0usize];
    ["Offset of field: Hmac_state::hash"][::std::mem::offset_of!(Hmac_state, hash) - 416usize];
    ["Offset of field: Hmac_state::key"][::std::mem::offset_of!(Hmac_state, key) - 420usize];
};
pub type hmac_state = Hmac_state;
extern "C" {
    pub fn hmac_init(
        hmac: *mut hmac_state,
        hash: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_process(
        hmac: *mut hmac_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_done(
        hmac: *mut hmac_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_memory(
        hash: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_memory_multi(
        hash: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hmac_file(
        hash: ::std::os::raw::c_int,
        fname: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct omac_state {
    pub cipher_idx: ::std::os::raw::c_int,
    pub buflen: ::std::os::raw::c_int,
    pub blklen: ::std::os::raw::c_int,
    pub block: [::std::os::raw::c_uchar; 144usize],
    pub prev: [::std::os::raw::c_uchar; 144usize],
    pub Lu: [[::std::os::raw::c_uchar; 144usize]; 2usize],
    pub key: symmetric_key,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of omac_state"][::std::mem::size_of::<omac_state>() - 4848usize];
    ["Alignment of omac_state"][::std::mem::align_of::<omac_state>() - 8usize];
    ["Offset of field: omac_state::cipher_idx"]
        [::std::mem::offset_of!(omac_state, cipher_idx) - 0usize];
    ["Offset of field: omac_state::buflen"][::std::mem::offset_of!(omac_state, buflen) - 4usize];
    ["Offset of field: omac_state::blklen"][::std::mem::offset_of!(omac_state, blklen) - 8usize];
    ["Offset of field: omac_state::block"][::std::mem::offset_of!(omac_state, block) - 12usize];
    ["Offset of field: omac_state::prev"][::std::mem::offset_of!(omac_state, prev) - 156usize];
    ["Offset of field: omac_state::Lu"][::std::mem::offset_of!(omac_state, Lu) - 300usize];
    ["Offset of field: omac_state::key"][::std::mem::offset_of!(omac_state, key) - 592usize];
};
extern "C" {
    pub fn omac_init(
        omac: *mut omac_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_process(
        omac: *mut omac_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_done(
        omac: *mut omac_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_memory_multi(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_file(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        filename: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn omac_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pmac_state {
    pub Ls: [[::std::os::raw::c_uchar; 144usize]; 32usize],
    pub Li: [::std::os::raw::c_uchar; 144usize],
    pub Lr: [::std::os::raw::c_uchar; 144usize],
    pub block: [::std::os::raw::c_uchar; 144usize],
    pub checksum: [::std::os::raw::c_uchar; 144usize],
    pub key: symmetric_key,
    pub block_index: ::std::os::raw::c_ulong,
    pub cipher_idx: ::std::os::raw::c_int,
    pub block_len: ::std::os::raw::c_int,
    pub buflen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pmac_state"][::std::mem::size_of::<pmac_state>() - 9464usize];
    ["Alignment of pmac_state"][::std::mem::align_of::<pmac_state>() - 8usize];
    ["Offset of field: pmac_state::Ls"][::std::mem::offset_of!(pmac_state, Ls) - 0usize];
    ["Offset of field: pmac_state::Li"][::std::mem::offset_of!(pmac_state, Li) - 4608usize];
    ["Offset of field: pmac_state::Lr"][::std::mem::offset_of!(pmac_state, Lr) - 4752usize];
    ["Offset of field: pmac_state::block"][::std::mem::offset_of!(pmac_state, block) - 4896usize];
    ["Offset of field: pmac_state::checksum"]
        [::std::mem::offset_of!(pmac_state, checksum) - 5040usize];
    ["Offset of field: pmac_state::key"][::std::mem::offset_of!(pmac_state, key) - 5184usize];
    ["Offset of field: pmac_state::block_index"]
        [::std::mem::offset_of!(pmac_state, block_index) - 9440usize];
    ["Offset of field: pmac_state::cipher_idx"]
        [::std::mem::offset_of!(pmac_state, cipher_idx) - 9448usize];
    ["Offset of field: pmac_state::block_len"]
        [::std::mem::offset_of!(pmac_state, block_len) - 9452usize];
    ["Offset of field: pmac_state::buflen"][::std::mem::offset_of!(pmac_state, buflen) - 9456usize];
};
extern "C" {
    pub fn pmac_init(
        pmac: *mut pmac_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_process(
        pmac: *mut pmac_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_done(
        pmac: *mut pmac_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_memory_multi(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_file(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        filename: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_ntz(x: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pmac_shift_xor(pmac: *mut pmac_state);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct poly1305_state {
    pub r: [ulong32; 5usize],
    pub h: [ulong32; 5usize],
    pub pad: [ulong32; 4usize],
    pub leftover: ::std::os::raw::c_ulong,
    pub buffer: [::std::os::raw::c_uchar; 16usize],
    pub final_: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of poly1305_state"][::std::mem::size_of::<poly1305_state>() - 88usize];
    ["Alignment of poly1305_state"][::std::mem::align_of::<poly1305_state>() - 8usize];
    ["Offset of field: poly1305_state::r"][::std::mem::offset_of!(poly1305_state, r) - 0usize];
    ["Offset of field: poly1305_state::h"][::std::mem::offset_of!(poly1305_state, h) - 20usize];
    ["Offset of field: poly1305_state::pad"][::std::mem::offset_of!(poly1305_state, pad) - 40usize];
    ["Offset of field: poly1305_state::leftover"]
        [::std::mem::offset_of!(poly1305_state, leftover) - 56usize];
    ["Offset of field: poly1305_state::buffer"]
        [::std::mem::offset_of!(poly1305_state, buffer) - 64usize];
    ["Offset of field: poly1305_state::final_"]
        [::std::mem::offset_of!(poly1305_state, final_) - 80usize];
};
extern "C" {
    pub fn poly1305_init(
        st: *mut poly1305_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_process(
        st: *mut poly1305_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_done(
        st: *mut poly1305_state,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_memory_multi(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_file(
        fname: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn poly1305_test() -> ::std::os::raw::c_int;
}
pub type blake2smac_state = hash_state;
extern "C" {
    pub fn blake2smac_init(
        st: *mut blake2smac_state,
        outlen: ::std::os::raw::c_ulong,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_process(
        st: *mut blake2smac_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_done(
        st: *mut blake2smac_state,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_memory_multi(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_file(
        fname: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2smac_test() -> ::std::os::raw::c_int;
}
pub type blake2bmac_state = hash_state;
extern "C" {
    pub fn blake2bmac_init(
        st: *mut blake2bmac_state,
        outlen: ::std::os::raw::c_ulong,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_process(
        st: *mut blake2bmac_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_done(
        st: *mut blake2bmac_state,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_memory_multi(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_file(
        fname: *const ::std::os::raw::c_char,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        mac: *mut ::std::os::raw::c_uchar,
        maclen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn blake2bmac_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct pelican_state {
    pub K: symmetric_key,
    pub state: [::std::os::raw::c_uchar; 16usize],
    pub buflen: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pelican_state"][::std::mem::size_of::<pelican_state>() - 4280usize];
    ["Alignment of pelican_state"][::std::mem::align_of::<pelican_state>() - 8usize];
    ["Offset of field: pelican_state::K"][::std::mem::offset_of!(pelican_state, K) - 0usize];
    ["Offset of field: pelican_state::state"]
        [::std::mem::offset_of!(pelican_state, state) - 4256usize];
    ["Offset of field: pelican_state::buflen"]
        [::std::mem::offset_of!(pelican_state, buflen) - 4272usize];
};
extern "C" {
    pub fn pelican_init(
        pelmac: *mut pelican_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pelican_process(
        pelmac: *mut pelican_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pelican_done(
        pelmac: *mut pelican_state,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pelican_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pelican_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct xcbc_state {
    pub K: [[::std::os::raw::c_uchar; 144usize]; 3usize],
    pub IV: [::std::os::raw::c_uchar; 144usize],
    pub key: symmetric_key,
    pub cipher: ::std::os::raw::c_int,
    pub buflen: ::std::os::raw::c_int,
    pub blocksize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of xcbc_state"][::std::mem::size_of::<xcbc_state>() - 4848usize];
    ["Alignment of xcbc_state"][::std::mem::align_of::<xcbc_state>() - 8usize];
    ["Offset of field: xcbc_state::K"][::std::mem::offset_of!(xcbc_state, K) - 0usize];
    ["Offset of field: xcbc_state::IV"][::std::mem::offset_of!(xcbc_state, IV) - 432usize];
    ["Offset of field: xcbc_state::key"][::std::mem::offset_of!(xcbc_state, key) - 576usize];
    ["Offset of field: xcbc_state::cipher"][::std::mem::offset_of!(xcbc_state, cipher) - 4832usize];
    ["Offset of field: xcbc_state::buflen"][::std::mem::offset_of!(xcbc_state, buflen) - 4836usize];
    ["Offset of field: xcbc_state::blocksize"]
        [::std::mem::offset_of!(xcbc_state, blocksize) - 4840usize];
};
extern "C" {
    pub fn xcbc_init(
        xcbc: *mut xcbc_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_process(
        xcbc: *mut xcbc_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_done(
        xcbc: *mut xcbc_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_memory_multi(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_file(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        filename: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xcbc_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct f9_state {
    pub akey: [::std::os::raw::c_uchar; 144usize],
    pub ACC: [::std::os::raw::c_uchar; 144usize],
    pub IV: [::std::os::raw::c_uchar; 144usize],
    pub key: symmetric_key,
    pub cipher: ::std::os::raw::c_int,
    pub buflen: ::std::os::raw::c_int,
    pub keylen: ::std::os::raw::c_int,
    pub blocksize: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of f9_state"][::std::mem::size_of::<f9_state>() - 4704usize];
    ["Alignment of f9_state"][::std::mem::align_of::<f9_state>() - 8usize];
    ["Offset of field: f9_state::akey"][::std::mem::offset_of!(f9_state, akey) - 0usize];
    ["Offset of field: f9_state::ACC"][::std::mem::offset_of!(f9_state, ACC) - 144usize];
    ["Offset of field: f9_state::IV"][::std::mem::offset_of!(f9_state, IV) - 288usize];
    ["Offset of field: f9_state::key"][::std::mem::offset_of!(f9_state, key) - 432usize];
    ["Offset of field: f9_state::cipher"][::std::mem::offset_of!(f9_state, cipher) - 4688usize];
    ["Offset of field: f9_state::buflen"][::std::mem::offset_of!(f9_state, buflen) - 4692usize];
    ["Offset of field: f9_state::keylen"][::std::mem::offset_of!(f9_state, keylen) - 4696usize];
    ["Offset of field: f9_state::blocksize"]
        [::std::mem::offset_of!(f9_state, blocksize) - 4700usize];
};
extern "C" {
    pub fn f9_init(
        f9: *mut f9_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_process(
        f9: *mut f9_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_done(
        f9: *mut f9_state,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_memory_multi(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_file(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        fname: *const ::std::os::raw::c_char,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn f9_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct eax_state {
    pub N: [::std::os::raw::c_uchar; 144usize],
    pub ctr: symmetric_CTR,
    pub headeromac: omac_state,
    pub ctomac: omac_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of eax_state"][::std::mem::size_of::<eax_state>() - 14408usize];
    ["Alignment of eax_state"][::std::mem::align_of::<eax_state>() - 8usize];
    ["Offset of field: eax_state::N"][::std::mem::offset_of!(eax_state, N) - 0usize];
    ["Offset of field: eax_state::ctr"][::std::mem::offset_of!(eax_state, ctr) - 144usize];
    ["Offset of field: eax_state::headeromac"]
        [::std::mem::offset_of!(eax_state, headeromac) - 4712usize];
    ["Offset of field: eax_state::ctomac"][::std::mem::offset_of!(eax_state, ctomac) - 9560usize];
};
extern "C" {
    pub fn eax_init(
        eax: *mut eax_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        header: *const ::std::os::raw::c_uchar,
        headerlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_encrypt(
        eax: *mut eax_state,
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_decrypt(
        eax: *mut eax_state,
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_addheader(
        eax: *mut eax_state,
        header: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_done(
        eax: *mut eax_state,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_encrypt_authenticate_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        header: *const ::std::os::raw::c_uchar,
        headerlen: ::std::os::raw::c_ulong,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_decrypt_verify_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        header: *const ::std::os::raw::c_uchar,
        headerlen: ::std::os::raw::c_ulong,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        taglen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn eax_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ocb_state {
    pub L: [::std::os::raw::c_uchar; 144usize],
    pub Ls: [[::std::os::raw::c_uchar; 144usize]; 32usize],
    pub Li: [::std::os::raw::c_uchar; 144usize],
    pub Lr: [::std::os::raw::c_uchar; 144usize],
    pub R: [::std::os::raw::c_uchar; 144usize],
    pub checksum: [::std::os::raw::c_uchar; 144usize],
    pub key: symmetric_key,
    pub block_index: ::std::os::raw::c_ulong,
    pub cipher: ::std::os::raw::c_int,
    pub block_len: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ocb_state"][::std::mem::size_of::<ocb_state>() - 9600usize];
    ["Alignment of ocb_state"][::std::mem::align_of::<ocb_state>() - 8usize];
    ["Offset of field: ocb_state::L"][::std::mem::offset_of!(ocb_state, L) - 0usize];
    ["Offset of field: ocb_state::Ls"][::std::mem::offset_of!(ocb_state, Ls) - 144usize];
    ["Offset of field: ocb_state::Li"][::std::mem::offset_of!(ocb_state, Li) - 4752usize];
    ["Offset of field: ocb_state::Lr"][::std::mem::offset_of!(ocb_state, Lr) - 4896usize];
    ["Offset of field: ocb_state::R"][::std::mem::offset_of!(ocb_state, R) - 5040usize];
    ["Offset of field: ocb_state::checksum"]
        [::std::mem::offset_of!(ocb_state, checksum) - 5184usize];
    ["Offset of field: ocb_state::key"][::std::mem::offset_of!(ocb_state, key) - 5328usize];
    ["Offset of field: ocb_state::block_index"]
        [::std::mem::offset_of!(ocb_state, block_index) - 9584usize];
    ["Offset of field: ocb_state::cipher"][::std::mem::offset_of!(ocb_state, cipher) - 9592usize];
    ["Offset of field: ocb_state::block_len"]
        [::std::mem::offset_of!(ocb_state, block_len) - 9596usize];
};
extern "C" {
    pub fn ocb_init(
        ocb: *mut ocb_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_encrypt(
        ocb: *mut ocb_state,
        pt: *const ::std::os::raw::c_uchar,
        ct: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_decrypt(
        ocb: *mut ocb_state,
        ct: *const ::std::os::raw::c_uchar,
        pt: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_done_encrypt(
        ocb: *mut ocb_state,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_done_decrypt(
        ocb: *mut ocb_state,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        taglen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_encrypt_authenticate_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_decrypt_verify_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        taglen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb_shift_xor(ocb: *mut ocb_state, Z: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn ocb_ntz(x: ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn s_ocb_done(
        ocb: *mut ocb_state,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ocb3_state {
    pub Offset_0: [::std::os::raw::c_uchar; 144usize],
    pub Offset_current: [::std::os::raw::c_uchar; 144usize],
    pub L_dollar: [::std::os::raw::c_uchar; 144usize],
    pub L_star: [::std::os::raw::c_uchar; 144usize],
    pub L_: [[::std::os::raw::c_uchar; 144usize]; 32usize],
    pub tag_part: [::std::os::raw::c_uchar; 144usize],
    pub checksum: [::std::os::raw::c_uchar; 144usize],
    pub aSum_current: [::std::os::raw::c_uchar; 144usize],
    pub aOffset_current: [::std::os::raw::c_uchar; 144usize],
    pub adata_buffer: [::std::os::raw::c_uchar; 144usize],
    pub key: symmetric_key,
    pub adata_buffer_bytes: ::std::os::raw::c_int,
    pub ablock_index: ::std::os::raw::c_ulong,
    pub block_index: ::std::os::raw::c_ulong,
    pub cipher: ::std::os::raw::c_int,
    pub tag_len: ::std::os::raw::c_int,
    pub block_len: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ocb3_state"][::std::mem::size_of::<ocb3_state>() - 10200usize];
    ["Alignment of ocb3_state"][::std::mem::align_of::<ocb3_state>() - 8usize];
    ["Offset of field: ocb3_state::Offset_0"]
        [::std::mem::offset_of!(ocb3_state, Offset_0) - 0usize];
    ["Offset of field: ocb3_state::Offset_current"]
        [::std::mem::offset_of!(ocb3_state, Offset_current) - 144usize];
    ["Offset of field: ocb3_state::L_dollar"]
        [::std::mem::offset_of!(ocb3_state, L_dollar) - 288usize];
    ["Offset of field: ocb3_state::L_star"][::std::mem::offset_of!(ocb3_state, L_star) - 432usize];
    ["Offset of field: ocb3_state::L_"][::std::mem::offset_of!(ocb3_state, L_) - 576usize];
    ["Offset of field: ocb3_state::tag_part"]
        [::std::mem::offset_of!(ocb3_state, tag_part) - 5184usize];
    ["Offset of field: ocb3_state::checksum"]
        [::std::mem::offset_of!(ocb3_state, checksum) - 5328usize];
    ["Offset of field: ocb3_state::aSum_current"]
        [::std::mem::offset_of!(ocb3_state, aSum_current) - 5472usize];
    ["Offset of field: ocb3_state::aOffset_current"]
        [::std::mem::offset_of!(ocb3_state, aOffset_current) - 5616usize];
    ["Offset of field: ocb3_state::adata_buffer"]
        [::std::mem::offset_of!(ocb3_state, adata_buffer) - 5760usize];
    ["Offset of field: ocb3_state::key"][::std::mem::offset_of!(ocb3_state, key) - 5904usize];
    ["Offset of field: ocb3_state::adata_buffer_bytes"]
        [::std::mem::offset_of!(ocb3_state, adata_buffer_bytes) - 10160usize];
    ["Offset of field: ocb3_state::ablock_index"]
        [::std::mem::offset_of!(ocb3_state, ablock_index) - 10168usize];
    ["Offset of field: ocb3_state::block_index"]
        [::std::mem::offset_of!(ocb3_state, block_index) - 10176usize];
    ["Offset of field: ocb3_state::cipher"]
        [::std::mem::offset_of!(ocb3_state, cipher) - 10184usize];
    ["Offset of field: ocb3_state::tag_len"]
        [::std::mem::offset_of!(ocb3_state, tag_len) - 10188usize];
    ["Offset of field: ocb3_state::block_len"]
        [::std::mem::offset_of!(ocb3_state, block_len) - 10192usize];
};
extern "C" {
    pub fn ocb3_init(
        ocb: *mut ocb3_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        taglen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_encrypt(
        ocb: *mut ocb3_state,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_decrypt(
        ocb: *mut ocb3_state,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_encrypt_last(
        ocb: *mut ocb3_state,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_decrypt_last(
        ocb: *mut ocb3_state,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_add_aad(
        ocb: *mut ocb3_state,
        aad: *const ::std::os::raw::c_uchar,
        aadlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_done(
        ocb: *mut ocb3_state,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_encrypt_authenticate_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        adata: *const ::std::os::raw::c_uchar,
        adatalen: ::std::os::raw::c_ulong,
        pt: *const ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_decrypt_verify_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        adata: *const ::std::os::raw::c_uchar,
        adatalen: ::std::os::raw::c_ulong,
        ct: *const ::std::os::raw::c_uchar,
        ctlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        tag: *const ::std::os::raw::c_uchar,
        taglen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ocb3_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ccm_state {
    pub PAD: [::std::os::raw::c_uchar; 16usize],
    pub ctr: [::std::os::raw::c_uchar; 16usize],
    pub CTRPAD: [::std::os::raw::c_uchar; 16usize],
    pub K: symmetric_key,
    pub cipher: ::std::os::raw::c_int,
    pub taglen: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub L: ::std::os::raw::c_ulong,
    pub ptlen: ::std::os::raw::c_ulong,
    pub current_ptlen: ::std::os::raw::c_ulong,
    pub aadlen: ::std::os::raw::c_ulong,
    pub current_aadlen: ::std::os::raw::c_ulong,
    pub noncelen: ::std::os::raw::c_ulong,
    pub CTRlen: ::std::os::raw::c_uchar,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ccm_state"][::std::mem::size_of::<ccm_state>() - 4376usize];
    ["Alignment of ccm_state"][::std::mem::align_of::<ccm_state>() - 8usize];
    ["Offset of field: ccm_state::PAD"][::std::mem::offset_of!(ccm_state, PAD) - 0usize];
    ["Offset of field: ccm_state::ctr"][::std::mem::offset_of!(ccm_state, ctr) - 16usize];
    ["Offset of field: ccm_state::CTRPAD"][::std::mem::offset_of!(ccm_state, CTRPAD) - 32usize];
    ["Offset of field: ccm_state::K"][::std::mem::offset_of!(ccm_state, K) - 48usize];
    ["Offset of field: ccm_state::cipher"][::std::mem::offset_of!(ccm_state, cipher) - 4304usize];
    ["Offset of field: ccm_state::taglen"][::std::mem::offset_of!(ccm_state, taglen) - 4308usize];
    ["Offset of field: ccm_state::x"][::std::mem::offset_of!(ccm_state, x) - 4312usize];
    ["Offset of field: ccm_state::L"][::std::mem::offset_of!(ccm_state, L) - 4320usize];
    ["Offset of field: ccm_state::ptlen"][::std::mem::offset_of!(ccm_state, ptlen) - 4328usize];
    ["Offset of field: ccm_state::current_ptlen"]
        [::std::mem::offset_of!(ccm_state, current_ptlen) - 4336usize];
    ["Offset of field: ccm_state::aadlen"][::std::mem::offset_of!(ccm_state, aadlen) - 4344usize];
    ["Offset of field: ccm_state::current_aadlen"]
        [::std::mem::offset_of!(ccm_state, current_aadlen) - 4352usize];
    ["Offset of field: ccm_state::noncelen"]
        [::std::mem::offset_of!(ccm_state, noncelen) - 4360usize];
    ["Offset of field: ccm_state::CTRlen"][::std::mem::offset_of!(ccm_state, CTRlen) - 4368usize];
};
extern "C" {
    pub fn ccm_init(
        ccm: *mut ccm_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
        ptlen: ::std::os::raw::c_int,
        taglen: ::std::os::raw::c_int,
        aadlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_reset(ccm: *mut ccm_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_add_nonce(
        ccm: *mut ccm_state,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_add_aad(
        ccm: *mut ccm_state,
        adata: *const ::std::os::raw::c_uchar,
        adatalen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_process(
        ccm: *mut ccm_state,
        pt: *mut ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_done(
        ccm: *mut ccm_state,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        uskey: *mut symmetric_key,
        nonce: *const ::std::os::raw::c_uchar,
        noncelen: ::std::os::raw::c_ulong,
        header: *const ::std::os::raw::c_uchar,
        headerlen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ccm_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_gf_mult(
        a: *const ::std::os::raw::c_uchar,
        b: *const ::std::os::raw::c_uchar,
        c: *mut ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub static gcm_shift_table: [::std::os::raw::c_uchar; 0usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct gcm_state {
    pub H: [::std::os::raw::c_uchar; 16usize],
    pub X: [::std::os::raw::c_uchar; 16usize],
    pub Y: [::std::os::raw::c_uchar; 16usize],
    pub Y_0: [::std::os::raw::c_uchar; 16usize],
    pub buf: [::std::os::raw::c_uchar; 16usize],
    pub PC: [[[::std::os::raw::c_uchar; 16usize]; 256usize]; 16usize],
    pub K: symmetric_key,
    pub cipher: ::std::os::raw::c_int,
    pub ivmode: ::std::os::raw::c_int,
    pub mode: ::std::os::raw::c_int,
    pub buflen: ::std::os::raw::c_int,
    pub totlen: ulong64,
    pub pttotlen: ulong64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of gcm_state"][::std::mem::size_of::<gcm_state>() - 69904usize];
    ["Alignment of gcm_state"][::std::mem::align_of::<gcm_state>() - 8usize];
    ["Offset of field: gcm_state::H"][::std::mem::offset_of!(gcm_state, H) - 0usize];
    ["Offset of field: gcm_state::X"][::std::mem::offset_of!(gcm_state, X) - 16usize];
    ["Offset of field: gcm_state::Y"][::std::mem::offset_of!(gcm_state, Y) - 32usize];
    ["Offset of field: gcm_state::Y_0"][::std::mem::offset_of!(gcm_state, Y_0) - 48usize];
    ["Offset of field: gcm_state::buf"][::std::mem::offset_of!(gcm_state, buf) - 64usize];
    ["Offset of field: gcm_state::PC"][::std::mem::offset_of!(gcm_state, PC) - 80usize];
    ["Offset of field: gcm_state::K"][::std::mem::offset_of!(gcm_state, K) - 65616usize];
    ["Offset of field: gcm_state::cipher"][::std::mem::offset_of!(gcm_state, cipher) - 69872usize];
    ["Offset of field: gcm_state::ivmode"][::std::mem::offset_of!(gcm_state, ivmode) - 69876usize];
    ["Offset of field: gcm_state::mode"][::std::mem::offset_of!(gcm_state, mode) - 69880usize];
    ["Offset of field: gcm_state::buflen"][::std::mem::offset_of!(gcm_state, buflen) - 69884usize];
    ["Offset of field: gcm_state::totlen"][::std::mem::offset_of!(gcm_state, totlen) - 69888usize];
    ["Offset of field: gcm_state::pttotlen"]
        [::std::mem::offset_of!(gcm_state, pttotlen) - 69896usize];
};
extern "C" {
    pub fn gcm_mult_h(gcm: *const gcm_state, I: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn gcm_init(
        gcm: *mut gcm_state,
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_reset(gcm: *mut gcm_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_add_iv(
        gcm: *mut gcm_state,
        IV: *const ::std::os::raw::c_uchar,
        IVlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_add_aad(
        gcm: *mut gcm_state,
        adata: *const ::std::os::raw::c_uchar,
        adatalen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_process(
        gcm: *mut gcm_state,
        pt: *mut ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_done(
        gcm: *mut gcm_state,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_memory(
        cipher: ::std::os::raw::c_int,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        IV: *const ::std::os::raw::c_uchar,
        IVlen: ::std::os::raw::c_ulong,
        adata: *const ::std::os::raw::c_uchar,
        adatalen: ::std::os::raw::c_ulong,
        pt: *mut ::std::os::raw::c_uchar,
        ptlen: ::std::os::raw::c_ulong,
        ct: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gcm_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chacha20poly1305_state {
    pub poly: poly1305_state,
    pub chacha: chacha_state,
    pub aadlen: ulong64,
    pub ctlen: ulong64,
    pub aadflg: ::std::os::raw::c_int,
    pub openssh_compat: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chacha20poly1305_state"][::std::mem::size_of::<chacha20poly1305_state>() - 264usize];
    ["Alignment of chacha20poly1305_state"]
        [::std::mem::align_of::<chacha20poly1305_state>() - 8usize];
    ["Offset of field: chacha20poly1305_state::poly"]
        [::std::mem::offset_of!(chacha20poly1305_state, poly) - 0usize];
    ["Offset of field: chacha20poly1305_state::chacha"]
        [::std::mem::offset_of!(chacha20poly1305_state, chacha) - 88usize];
    ["Offset of field: chacha20poly1305_state::aadlen"]
        [::std::mem::offset_of!(chacha20poly1305_state, aadlen) - 240usize];
    ["Offset of field: chacha20poly1305_state::ctlen"]
        [::std::mem::offset_of!(chacha20poly1305_state, ctlen) - 248usize];
    ["Offset of field: chacha20poly1305_state::aadflg"]
        [::std::mem::offset_of!(chacha20poly1305_state, aadflg) - 256usize];
    ["Offset of field: chacha20poly1305_state::openssh_compat"]
        [::std::mem::offset_of!(chacha20poly1305_state, openssh_compat) - 260usize];
};
extern "C" {
    pub fn chacha20poly1305_init(
        st: *mut chacha20poly1305_state,
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_setiv(
        st: *mut chacha20poly1305_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_setiv_rfc7905(
        st: *mut chacha20poly1305_state,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        sequence_number: ulong64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_add_aad(
        st: *mut chacha20poly1305_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_encrypt(
        st: *mut chacha20poly1305_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_decrypt(
        st: *mut chacha20poly1305_state,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_done(
        st: *mut chacha20poly1305_state,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_memory(
        key: *const ::std::os::raw::c_uchar,
        keylen: ::std::os::raw::c_ulong,
        iv: *const ::std::os::raw::c_uchar,
        ivlen: ::std::os::raw::c_ulong,
        aad: *const ::std::os::raw::c_uchar,
        aadlen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        tag: *mut ::std::os::raw::c_uchar,
        taglen: *mut ::std::os::raw::c_ulong,
        direction: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20poly1305_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct yarrow_prng {
    pub cipher: ::std::os::raw::c_int,
    pub hash: ::std::os::raw::c_int,
    pub pool: [::std::os::raw::c_uchar; 144usize],
    pub ctr: symmetric_CTR,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of yarrow_prng"][::std::mem::size_of::<yarrow_prng>() - 4720usize];
    ["Alignment of yarrow_prng"][::std::mem::align_of::<yarrow_prng>() - 8usize];
    ["Offset of field: yarrow_prng::cipher"][::std::mem::offset_of!(yarrow_prng, cipher) - 0usize];
    ["Offset of field: yarrow_prng::hash"][::std::mem::offset_of!(yarrow_prng, hash) - 4usize];
    ["Offset of field: yarrow_prng::pool"][::std::mem::offset_of!(yarrow_prng, pool) - 8usize];
    ["Offset of field: yarrow_prng::ctr"][::std::mem::offset_of!(yarrow_prng, ctr) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rc4_prng {
    pub s: rc4_state,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of rc4_prng"][::std::mem::size_of::<rc4_prng>() - 264usize];
    ["Alignment of rc4_prng"][::std::mem::align_of::<rc4_prng>() - 4usize];
    ["Offset of field: rc4_prng::s"][::std::mem::offset_of!(rc4_prng, s) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct chacha20_prng {
    pub s: chacha_state,
    pub ent: [::std::os::raw::c_uchar; 40usize],
    pub idx: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of chacha20_prng"][::std::mem::size_of::<chacha20_prng>() - 200usize];
    ["Alignment of chacha20_prng"][::std::mem::align_of::<chacha20_prng>() - 8usize];
    ["Offset of field: chacha20_prng::s"][::std::mem::offset_of!(chacha20_prng, s) - 0usize];
    ["Offset of field: chacha20_prng::ent"][::std::mem::offset_of!(chacha20_prng, ent) - 152usize];
    ["Offset of field: chacha20_prng::idx"][::std::mem::offset_of!(chacha20_prng, idx) - 192usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct fortuna_prng {
    pub pool: [hash_state; 32usize],
    pub skey: symmetric_key,
    pub K: [::std::os::raw::c_uchar; 32usize],
    pub IV: [::std::os::raw::c_uchar; 16usize],
    pub pool_idx: ::std::os::raw::c_ulong,
    pub pool0_len: ::std::os::raw::c_ulong,
    pub wd: ulong64,
    pub reset_cnt: ulong64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fortuna_prng"][::std::mem::size_of::<fortuna_prng>() - 17648usize];
    ["Alignment of fortuna_prng"][::std::mem::align_of::<fortuna_prng>() - 8usize];
    ["Offset of field: fortuna_prng::pool"][::std::mem::offset_of!(fortuna_prng, pool) - 0usize];
    ["Offset of field: fortuna_prng::skey"]
        [::std::mem::offset_of!(fortuna_prng, skey) - 13312usize];
    ["Offset of field: fortuna_prng::K"][::std::mem::offset_of!(fortuna_prng, K) - 17568usize];
    ["Offset of field: fortuna_prng::IV"][::std::mem::offset_of!(fortuna_prng, IV) - 17600usize];
    ["Offset of field: fortuna_prng::pool_idx"]
        [::std::mem::offset_of!(fortuna_prng, pool_idx) - 17616usize];
    ["Offset of field: fortuna_prng::pool0_len"]
        [::std::mem::offset_of!(fortuna_prng, pool0_len) - 17624usize];
    ["Offset of field: fortuna_prng::wd"][::std::mem::offset_of!(fortuna_prng, wd) - 17632usize];
    ["Offset of field: fortuna_prng::reset_cnt"]
        [::std::mem::offset_of!(fortuna_prng, reset_cnt) - 17640usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sober128_prng {
    pub s: sober128_state,
    pub ent: [::std::os::raw::c_uchar; 40usize],
    pub idx: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sober128_prng"][::std::mem::size_of::<sober128_prng>() - 200usize];
    ["Alignment of sober128_prng"][::std::mem::align_of::<sober128_prng>() - 8usize];
    ["Offset of field: sober128_prng::s"][::std::mem::offset_of!(sober128_prng, s) - 0usize];
    ["Offset of field: sober128_prng::ent"][::std::mem::offset_of!(sober128_prng, ent) - 148usize];
    ["Offset of field: sober128_prng::idx"][::std::mem::offset_of!(sober128_prng, idx) - 192usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct prng_state {
    pub u: prng_state__bindgen_ty_1,
    pub ready: ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union prng_state__bindgen_ty_1 {
    pub dummy: [::std::os::raw::c_char; 1usize],
    pub yarrow: yarrow_prng,
    pub rc4: rc4_prng,
    pub chacha: chacha20_prng,
    pub fortuna: fortuna_prng,
    pub sober128: sober128_prng,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prng_state__bindgen_ty_1"]
        [::std::mem::size_of::<prng_state__bindgen_ty_1>() - 17648usize];
    ["Alignment of prng_state__bindgen_ty_1"]
        [::std::mem::align_of::<prng_state__bindgen_ty_1>() - 8usize];
    ["Offset of field: prng_state__bindgen_ty_1::dummy"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, dummy) - 0usize];
    ["Offset of field: prng_state__bindgen_ty_1::yarrow"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, yarrow) - 0usize];
    ["Offset of field: prng_state__bindgen_ty_1::rc4"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, rc4) - 0usize];
    ["Offset of field: prng_state__bindgen_ty_1::chacha"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, chacha) - 0usize];
    ["Offset of field: prng_state__bindgen_ty_1::fortuna"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, fortuna) - 0usize];
    ["Offset of field: prng_state__bindgen_ty_1::sober128"]
        [::std::mem::offset_of!(prng_state__bindgen_ty_1, sober128) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of prng_state"][::std::mem::size_of::<prng_state>() - 17656usize];
    ["Alignment of prng_state"][::std::mem::align_of::<prng_state>() - 8usize];
    ["Offset of field: prng_state::u"][::std::mem::offset_of!(prng_state, u) - 0usize];
    ["Offset of field: prng_state::ready"][::std::mem::offset_of!(prng_state, ready) - 17648usize];
};
#[doc = " PRNG descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_prng_descriptor {
    #[doc = " Name of the PRNG"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " size in bytes of exported state"]
    pub export_size: ::std::os::raw::c_int,
    #[doc = " Start a PRNG state\n@param prng   [out] The state to initialize\n@return CRYPT_OK if successful"]
    pub start:
        ::std::option::Option<unsafe extern "C" fn(prng: *mut prng_state) -> ::std::os::raw::c_int>,
    #[doc = " Add entropy to the PRNG\n@param in         The entropy\n@param inlen      Length of the entropy (octets)\\\n@param prng       The PRNG state\n@return CRYPT_OK if successful"]
    pub add_entropy: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            prng: *mut prng_state,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Ready a PRNG state to read from\n@param prng       The PRNG state to ready\n@return CRYPT_OK if successful"]
    pub ready:
        ::std::option::Option<unsafe extern "C" fn(prng: *mut prng_state) -> ::std::os::raw::c_int>,
    #[doc = " Read from the PRNG\n@param out     [out] Where to store the data\n@param outlen  Length of data desired (octets)\n@param prng    The PRNG state to read from\n@return Number of octets read"]
    pub read: ::std::option::Option<
        unsafe extern "C" fn(
            out: *mut ::std::os::raw::c_uchar,
            outlen: ::std::os::raw::c_ulong,
            prng: *mut prng_state,
        ) -> ::std::os::raw::c_ulong,
    >,
    #[doc = " Terminate a PRNG state\n@param prng   The PRNG state to terminate\n@return CRYPT_OK if successful"]
    pub done:
        ::std::option::Option<unsafe extern "C" fn(prng: *mut prng_state) -> ::std::os::raw::c_int>,
    #[doc = " Export a PRNG state\n@param out     [out] The destination for the state\n@param outlen  [in/out] The max size and resulting size of the PRNG state\n@param prng    The PRNG to export\n@return CRYPT_OK if successful"]
    pub pexport: ::std::option::Option<
        unsafe extern "C" fn(
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
            prng: *mut prng_state,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Import a PRNG state\n@param in      The data to import\n@param inlen   The length of the data to import (octets)\n@param prng    The PRNG to initialize/import\n@return CRYPT_OK if successful"]
    pub pimport: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            prng: *mut prng_state,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Self-test the PRNG\n@return CRYPT_OK if successful, CRYPT_NOP if self-testing has been disabled"]
    pub test: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_prng_descriptor"][::std::mem::size_of::<ltc_prng_descriptor>() - 80usize];
    ["Alignment of ltc_prng_descriptor"][::std::mem::align_of::<ltc_prng_descriptor>() - 8usize];
    ["Offset of field: ltc_prng_descriptor::name"]
        [::std::mem::offset_of!(ltc_prng_descriptor, name) - 0usize];
    ["Offset of field: ltc_prng_descriptor::export_size"]
        [::std::mem::offset_of!(ltc_prng_descriptor, export_size) - 8usize];
    ["Offset of field: ltc_prng_descriptor::start"]
        [::std::mem::offset_of!(ltc_prng_descriptor, start) - 16usize];
    ["Offset of field: ltc_prng_descriptor::add_entropy"]
        [::std::mem::offset_of!(ltc_prng_descriptor, add_entropy) - 24usize];
    ["Offset of field: ltc_prng_descriptor::ready"]
        [::std::mem::offset_of!(ltc_prng_descriptor, ready) - 32usize];
    ["Offset of field: ltc_prng_descriptor::read"]
        [::std::mem::offset_of!(ltc_prng_descriptor, read) - 40usize];
    ["Offset of field: ltc_prng_descriptor::done"]
        [::std::mem::offset_of!(ltc_prng_descriptor, done) - 48usize];
    ["Offset of field: ltc_prng_descriptor::pexport"]
        [::std::mem::offset_of!(ltc_prng_descriptor, pexport) - 56usize];
    ["Offset of field: ltc_prng_descriptor::pimport"]
        [::std::mem::offset_of!(ltc_prng_descriptor, pimport) - 64usize];
    ["Offset of field: ltc_prng_descriptor::test"]
        [::std::mem::offset_of!(ltc_prng_descriptor, test) - 72usize];
};
extern "C" {
    pub static mut prng_descriptor: [ltc_prng_descriptor; 0usize];
}
extern "C" {
    pub fn yarrow_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn yarrow_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yarrow_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static yarrow_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn fortuna_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_add_random_event(
        source: ::std::os::raw::c_ulong,
        pool: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn fortuna_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_update_seed(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fortuna_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static fortuna_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn rc4_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn rc4_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rc4_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static rc4_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn chacha20_prng_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn chacha20_prng_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn chacha20_prng_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static chacha20_prng_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn sprng_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sprng_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprng_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sprng_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn sober128_start(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_add_entropy(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_ready(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_read(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn sober128_done(prng: *mut prng_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sober128_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub static sober128_desc: ltc_prng_descriptor;
}
extern "C" {
    pub fn find_prng(name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_prng(prng: *const ltc_prng_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unregister_prng(prng: *const ltc_prng_descriptor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn register_all_prngs() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn prng_is_valid(idx: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rng_get_bytes(
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn rng_make_prng(
        bits: ::std::os::raw::c_int,
        wprng: ::std::os::raw::c_int,
        prng: *mut prng_state,
        callback: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct password_ctx {
    #[doc = "Callback function that is called when a password is required.\n\nPlease be aware that the library takes ownership of the pointer that is\nreturned to the library via `str`.\nThe data will be zeroed and `free()`'d as soon as it isn't required anymore.\nc.f. the documentation of the `free()` function pointer for details.\n\n@param str        Pointer to pointer where the password will be stored.\n@param len        Pointer to the length of the password.\n@param userdata   `userdata` that was passed in the `password_ctx` struct.\n@return CRYPT_OK on success"]
    pub callback: ::std::option::Option<
        unsafe extern "C" fn(
            str_: *mut *mut ::std::os::raw::c_void,
            len: *mut ::std::os::raw::c_ulong,
            userdata: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = "Optional free function to free the allocated buffer.\n\nAt the point where the value returned by `callback()` is not required\nanymore the library will free it by either calling this `free()` function\nor `XFREE()` in case this `free()` function is set to `NULL`.\n\n@param str        Pointer to the buffer to be free'd."]
    pub free: ::std::option::Option<unsafe extern "C" fn(str_: *mut ::std::os::raw::c_void)>,
    #[doc = " Opaque `userdata` pointer passed when the callback is called"]
    pub userdata: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of password_ctx"][::std::mem::size_of::<password_ctx>() - 24usize];
    ["Alignment of password_ctx"][::std::mem::align_of::<password_ctx>() - 8usize];
    ["Offset of field: password_ctx::callback"]
        [::std::mem::offset_of!(password_ctx, callback) - 0usize];
    ["Offset of field: password_ctx::free"][::std::mem::offset_of!(password_ctx, free) - 8usize];
    ["Offset of field: password_ctx::userdata"]
        [::std::mem::offset_of!(password_ctx, userdata) - 16usize];
};
pub const ltc_pka_id_LTC_PKA_UNDEF: ltc_pka_id = 0;
pub const ltc_pka_id_LTC_PKA_RSA: ltc_pka_id = 1;
pub const ltc_pka_id_LTC_PKA_DSA: ltc_pka_id = 2;
pub const ltc_pka_id_LTC_PKA_EC: ltc_pka_id = 3;
pub const ltc_pka_id_LTC_PKA_X25519: ltc_pka_id = 4;
pub const ltc_pka_id_LTC_PKA_ED25519: ltc_pka_id = 5;
pub const ltc_pka_id_LTC_PKA_DH: ltc_pka_id = 6;
pub const ltc_pka_id_LTC_PKA_NUM: ltc_pka_id = 7;
pub type ltc_pka_id = ::std::os::raw::c_uint;
pub const public_key_type_PK_PUBLIC: public_key_type = 0;
pub const public_key_type_PK_PRIVATE: public_key_type = 1;
pub const public_key_type_PK_STD: public_key_type = 4096;
pub const public_key_type_PK_COMPRESSED: public_key_type = 8192;
pub const public_key_type_PK_CURVEOID: public_key_type = 16384;
pub type public_key_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn rand_prime(
        N: *mut ::std::os::raw::c_void,
        len: ::std::os::raw::c_long,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[doc = " RSA PKCS style key"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Rsa_key {
    #[doc = " Type of key, PK_PRIVATE or PK_PUBLIC"]
    pub type_: ::std::os::raw::c_int,
    #[doc = " The public exponent"]
    pub e: *mut ::std::os::raw::c_void,
    #[doc = " The private exponent"]
    pub d: *mut ::std::os::raw::c_void,
    #[doc = " The modulus"]
    pub N: *mut ::std::os::raw::c_void,
    #[doc = " The p factor of N"]
    pub p: *mut ::std::os::raw::c_void,
    #[doc = " The q factor of N"]
    pub q: *mut ::std::os::raw::c_void,
    #[doc = " The 1/q mod p CRT param"]
    pub qP: *mut ::std::os::raw::c_void,
    #[doc = " The d mod (p - 1) CRT param"]
    pub dP: *mut ::std::os::raw::c_void,
    #[doc = " The d mod (q - 1) CRT param"]
    pub dQ: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Rsa_key"][::std::mem::size_of::<Rsa_key>() - 72usize];
    ["Alignment of Rsa_key"][::std::mem::align_of::<Rsa_key>() - 8usize];
    ["Offset of field: Rsa_key::type_"][::std::mem::offset_of!(Rsa_key, type_) - 0usize];
    ["Offset of field: Rsa_key::e"][::std::mem::offset_of!(Rsa_key, e) - 8usize];
    ["Offset of field: Rsa_key::d"][::std::mem::offset_of!(Rsa_key, d) - 16usize];
    ["Offset of field: Rsa_key::N"][::std::mem::offset_of!(Rsa_key, N) - 24usize];
    ["Offset of field: Rsa_key::p"][::std::mem::offset_of!(Rsa_key, p) - 32usize];
    ["Offset of field: Rsa_key::q"][::std::mem::offset_of!(Rsa_key, q) - 40usize];
    ["Offset of field: Rsa_key::qP"][::std::mem::offset_of!(Rsa_key, qP) - 48usize];
    ["Offset of field: Rsa_key::dP"][::std::mem::offset_of!(Rsa_key, dP) - 56usize];
    ["Offset of field: Rsa_key::dQ"][::std::mem::offset_of!(Rsa_key, dQ) - 64usize];
};
#[doc = " RSA PKCS style key"]
pub type rsa_key = Rsa_key;
extern "C" {
    pub fn rsa_make_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        e: ::std::os::raw::c_long,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_make_key_ubin_e(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        size: ::std::os::raw::c_int,
        e: *const ::std::os::raw::c_uchar,
        elen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_get_size(key: *const rsa_key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_exptmod(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        which: ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_free(key: *mut rsa_key);
}
extern "C" {
    pub fn rsa_encrypt_key_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        lparam: *const ::std::os::raw::c_uchar,
        lparamlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        prng_idx: ::std::os::raw::c_int,
        mgf_hash: ::std::os::raw::c_int,
        lparam_hash: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_decrypt_key_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        lparam: *const ::std::os::raw::c_uchar,
        lparamlen: ::std::os::raw::c_ulong,
        mgf_hash: ::std::os::raw::c_int,
        lparam_hash: ::std::os::raw::c_int,
        padding: ::std::os::raw::c_int,
        stat: *mut ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_sign_hash_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        padding: ::std::os::raw::c_int,
        prng: *mut prng_state,
        prng_idx: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        saltlen: ::std::os::raw::c_ulong,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_verify_hash_ex(
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        hash: *const ::std::os::raw::c_uchar,
        hashlen: ::std::os::raw::c_ulong,
        padding: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        saltlen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_sign_saltlen_get_max_ex(
        padding: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_import_x509(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_set_key(
        N: *const ::std::os::raw::c_uchar,
        Nlen: ::std::os::raw::c_ulong,
        e: *const ::std::os::raw::c_uchar,
        elen: ::std::os::raw::c_ulong,
        d: *const ::std::os::raw::c_uchar,
        dlen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_set_factors(
        p: *const ::std::os::raw::c_uchar,
        plen: ::std::os::raw::c_ulong,
        q: *const ::std::os::raw::c_uchar,
        qlen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rsa_set_crt_params(
        dP: *const ::std::os::raw::c_uchar,
        dPlen: ::std::os::raw::c_ulong,
        dQ: *const ::std::os::raw::c_uchar,
        dQlen: ::std::os::raw::c_ulong,
        qP: *const ::std::os::raw::c_uchar,
        qPlen: ::std::os::raw::c_ulong,
        key: *mut rsa_key,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dh_key {
    pub type_: ::std::os::raw::c_int,
    pub x: *mut ::std::os::raw::c_void,
    pub y: *mut ::std::os::raw::c_void,
    pub base: *mut ::std::os::raw::c_void,
    pub prime: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dh_key"][::std::mem::size_of::<dh_key>() - 40usize];
    ["Alignment of dh_key"][::std::mem::align_of::<dh_key>() - 8usize];
    ["Offset of field: dh_key::type_"][::std::mem::offset_of!(dh_key, type_) - 0usize];
    ["Offset of field: dh_key::x"][::std::mem::offset_of!(dh_key, x) - 8usize];
    ["Offset of field: dh_key::y"][::std::mem::offset_of!(dh_key, y) - 16usize];
    ["Offset of field: dh_key::base"][::std::mem::offset_of!(dh_key, base) - 24usize];
    ["Offset of field: dh_key::prime"][::std::mem::offset_of!(dh_key, prime) - 32usize];
};
extern "C" {
    pub fn dh_get_groupsize(key: *const dh_key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_set_pg(
        p: *const ::std::os::raw::c_uchar,
        plen: ::std::os::raw::c_ulong,
        g: *const ::std::os::raw::c_uchar,
        glen: ::std::os::raw::c_ulong,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_set_pg_dhparam(
        dhparam: *const ::std::os::raw::c_uchar,
        dhparamlen: ::std::os::raw::c_ulong,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_set_pg_groupsize(
        groupsize: ::std::os::raw::c_int,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_set_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_generate_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut dh_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_shared_secret(
        private_key: *const dh_key,
        public_key: *const dh_key,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dh_free(key: *mut dh_key);
}
extern "C" {
    pub fn dh_export_key(
        out: *mut ::std::os::raw::c_void,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const dh_key,
    ) -> ::std::os::raw::c_int;
}
#[doc = " Structure defines a GF(p) curve"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_ecc_curve {
    #[doc = " The prime that defines the field the curve is in (encoded in hex)"]
    pub prime: *const ::std::os::raw::c_char,
    #[doc = " The fields A param (hex)"]
    pub A: *const ::std::os::raw::c_char,
    #[doc = " The fields B param (hex)"]
    pub B: *const ::std::os::raw::c_char,
    #[doc = " The order of the curve (hex)"]
    pub order: *const ::std::os::raw::c_char,
    #[doc = " The x co-ordinate of the base point on the curve (hex)"]
    pub Gx: *const ::std::os::raw::c_char,
    #[doc = " The y co-ordinate of the base point on the curve (hex)"]
    pub Gy: *const ::std::os::raw::c_char,
    #[doc = " The co-factor"]
    pub cofactor: ::std::os::raw::c_ulong,
    #[doc = " The OID"]
    pub OID: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_ecc_curve"][::std::mem::size_of::<ltc_ecc_curve>() - 64usize];
    ["Alignment of ltc_ecc_curve"][::std::mem::align_of::<ltc_ecc_curve>() - 8usize];
    ["Offset of field: ltc_ecc_curve::prime"]
        [::std::mem::offset_of!(ltc_ecc_curve, prime) - 0usize];
    ["Offset of field: ltc_ecc_curve::A"][::std::mem::offset_of!(ltc_ecc_curve, A) - 8usize];
    ["Offset of field: ltc_ecc_curve::B"][::std::mem::offset_of!(ltc_ecc_curve, B) - 16usize];
    ["Offset of field: ltc_ecc_curve::order"]
        [::std::mem::offset_of!(ltc_ecc_curve, order) - 24usize];
    ["Offset of field: ltc_ecc_curve::Gx"][::std::mem::offset_of!(ltc_ecc_curve, Gx) - 32usize];
    ["Offset of field: ltc_ecc_curve::Gy"][::std::mem::offset_of!(ltc_ecc_curve, Gy) - 40usize];
    ["Offset of field: ltc_ecc_curve::cofactor"]
        [::std::mem::offset_of!(ltc_ecc_curve, cofactor) - 48usize];
    ["Offset of field: ltc_ecc_curve::OID"][::std::mem::offset_of!(ltc_ecc_curve, OID) - 56usize];
};
#[doc = " A point on a ECC curve, stored in Jacbobian format such that (x,y,z) => (x/z^2, y/z^3, 1) when interpretted as affine"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecc_point {
    #[doc = " The x co-ordinate"]
    pub x: *mut ::std::os::raw::c_void,
    #[doc = " The y co-ordinate"]
    pub y: *mut ::std::os::raw::c_void,
    #[doc = " The z co-ordinate"]
    pub z: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecc_point"][::std::mem::size_of::<ecc_point>() - 24usize];
    ["Alignment of ecc_point"][::std::mem::align_of::<ecc_point>() - 8usize];
    ["Offset of field: ecc_point::x"][::std::mem::offset_of!(ecc_point, x) - 0usize];
    ["Offset of field: ecc_point::y"][::std::mem::offset_of!(ecc_point, y) - 8usize];
    ["Offset of field: ecc_point::z"][::std::mem::offset_of!(ecc_point, z) - 16usize];
};
#[doc = " ECC key's domain parameters"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_ecc_dp {
    #[doc = " The size of the curve in octets"]
    pub size: ::std::os::raw::c_int,
    #[doc = " The prime that defines the field the curve is in"]
    pub prime: *mut ::std::os::raw::c_void,
    #[doc = " The fields A param"]
    pub A: *mut ::std::os::raw::c_void,
    #[doc = " The fields B param"]
    pub B: *mut ::std::os::raw::c_void,
    #[doc = " The order of the curve"]
    pub order: *mut ::std::os::raw::c_void,
    #[doc = " The base point G on the curve"]
    pub base: ecc_point,
    #[doc = " The co-factor"]
    pub cofactor: ::std::os::raw::c_ulong,
    #[doc = " The OID"]
    pub oid: [::std::os::raw::c_ulong; 16usize],
    pub oidlen: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_ecc_dp"][::std::mem::size_of::<ltc_ecc_dp>() - 208usize];
    ["Alignment of ltc_ecc_dp"][::std::mem::align_of::<ltc_ecc_dp>() - 8usize];
    ["Offset of field: ltc_ecc_dp::size"][::std::mem::offset_of!(ltc_ecc_dp, size) - 0usize];
    ["Offset of field: ltc_ecc_dp::prime"][::std::mem::offset_of!(ltc_ecc_dp, prime) - 8usize];
    ["Offset of field: ltc_ecc_dp::A"][::std::mem::offset_of!(ltc_ecc_dp, A) - 16usize];
    ["Offset of field: ltc_ecc_dp::B"][::std::mem::offset_of!(ltc_ecc_dp, B) - 24usize];
    ["Offset of field: ltc_ecc_dp::order"][::std::mem::offset_of!(ltc_ecc_dp, order) - 32usize];
    ["Offset of field: ltc_ecc_dp::base"][::std::mem::offset_of!(ltc_ecc_dp, base) - 40usize];
    ["Offset of field: ltc_ecc_dp::cofactor"]
        [::std::mem::offset_of!(ltc_ecc_dp, cofactor) - 64usize];
    ["Offset of field: ltc_ecc_dp::oid"][::std::mem::offset_of!(ltc_ecc_dp, oid) - 72usize];
    ["Offset of field: ltc_ecc_dp::oidlen"][::std::mem::offset_of!(ltc_ecc_dp, oidlen) - 200usize];
};
#[doc = " An ECC key"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ecc_key {
    #[doc = " Type of key, PK_PRIVATE or PK_PUBLIC"]
    pub type_: ::std::os::raw::c_int,
    #[doc = " Structure with domain parameters"]
    pub dp: ltc_ecc_dp,
    #[doc = " Structure with the public key"]
    pub pubkey: ecc_point,
    #[doc = " The private key"]
    pub k: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ecc_key"][::std::mem::size_of::<ecc_key>() - 248usize];
    ["Alignment of ecc_key"][::std::mem::align_of::<ecc_key>() - 8usize];
    ["Offset of field: ecc_key::type_"][::std::mem::offset_of!(ecc_key, type_) - 0usize];
    ["Offset of field: ecc_key::dp"][::std::mem::offset_of!(ecc_key, dp) - 8usize];
    ["Offset of field: ecc_key::pubkey"][::std::mem::offset_of!(ecc_key, pubkey) - 216usize];
    ["Offset of field: ecc_key::k"][::std::mem::offset_of!(ecc_key, k) - 240usize];
};
pub const ecc_signature_type__LTC_ECCSIG_ANSIX962: ecc_signature_type_ = 0;
pub const ecc_signature_type__LTC_ECCSIG_RFC7518: ecc_signature_type_ = 1;
pub const ecc_signature_type__LTC_ECCSIG_ETH27: ecc_signature_type_ = 2;
pub const ecc_signature_type__LTC_ECCSIG_RFC5656: ecc_signature_type_ = 3;
#[doc = " Formats of ECC signatures"]
pub type ecc_signature_type_ = ::std::os::raw::c_uint;
#[doc = " Formats of ECC signatures"]
pub use self::ecc_signature_type_ as ecc_signature_type;
extern "C" {
    #[doc = " the ECC params provided"]
    pub static ltc_ecc_curves: [ltc_ecc_curve; 0usize];
}
extern "C" {
    pub fn ecc_sizes(low: *mut ::std::os::raw::c_int, high: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn ecc_get_size(key: *const ecc_key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_find_curve(
        name_or_oid: *const ::std::os::raw::c_char,
        cu: *mut *const ltc_ecc_curve,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_set_curve(cu: *const ltc_ecc_curve, key: *mut ecc_key) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_generate_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_set_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_get_key(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_get_oid_str(
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_make_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        keysize: ::std::os::raw::c_int,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_make_key_ex(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut ecc_key,
        cu: *const ltc_ecc_curve,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_free(key: *mut ecc_key);
}
extern "C" {
    pub fn ecc_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_import_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
        cu: *const ltc_ecc_curve,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_ansi_x963_export(
        key: *const ecc_key,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_ansi_x963_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_ansi_x963_import_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
        cu: *const ltc_ecc_curve,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_export_openssl(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_import_openssl(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_import_x509(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_shared_secret(
        private_key: *const ecc_key,
        public_key: *const ecc_key,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_encrypt_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_decrypt_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_sign_hash_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        sigformat: ecc_signature_type,
        recid: *mut ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_verify_hash_ex(
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        hash: *const ::std::os::raw::c_uchar,
        hashlen: ::std::os::raw::c_ulong,
        sigformat: ecc_signature_type,
        stat: *mut ::std::os::raw::c_int,
        key: *const ecc_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ecc_recover_key(
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        hash: *const ::std::os::raw::c_uchar,
        hashlen: ::std::os::raw::c_ulong,
        recid: ::std::os::raw::c_int,
        sigformat: ecc_signature_type,
        key: *mut ecc_key,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct curve25519_key {
    #[doc = " The key type, PK_PRIVATE or PK_PUBLIC"]
    pub type_: public_key_type,
    #[doc = " The PK-algorithm, LTC_PKA_ED25519 or LTC_PKA_X25519"]
    pub pka: ltc_pka_id,
    #[doc = " The private key"]
    pub priv_: [::std::os::raw::c_uchar; 32usize],
    #[doc = " The public key"]
    pub pub_: [::std::os::raw::c_uchar; 32usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of curve25519_key"][::std::mem::size_of::<curve25519_key>() - 72usize];
    ["Alignment of curve25519_key"][::std::mem::align_of::<curve25519_key>() - 4usize];
    ["Offset of field: curve25519_key::type_"]
        [::std::mem::offset_of!(curve25519_key, type_) - 0usize];
    ["Offset of field: curve25519_key::pka"][::std::mem::offset_of!(curve25519_key, pka) - 4usize];
    ["Offset of field: curve25519_key::priv_"]
        [::std::mem::offset_of!(curve25519_key, priv_) - 8usize];
    ["Offset of field: curve25519_key::pub_"]
        [::std::mem::offset_of!(curve25519_key, pub_) - 40usize];
};
extern "C" {
    #[doc = " Ed25519 Signature API"]
    pub fn ed25519_make_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        which: ::std::os::raw::c_int,
        key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_import_raw(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        which: ::std::os::raw::c_int,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_import_x509(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_sign(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *mut ::std::os::raw::c_uchar,
        siglen: *mut ::std::os::raw::c_ulong,
        private_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519ctx_sign(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *mut ::std::os::raw::c_uchar,
        siglen: *mut ::std::os::raw::c_ulong,
        ctx: *const ::std::os::raw::c_uchar,
        ctxlen: ::std::os::raw::c_ulong,
        private_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519ph_sign(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *mut ::std::os::raw::c_uchar,
        siglen: *mut ::std::os::raw::c_ulong,
        ctx: *const ::std::os::raw::c_uchar,
        ctxlen: ::std::os::raw::c_ulong,
        private_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519_verify(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        public_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519ctx_verify(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        ctx: *const ::std::os::raw::c_uchar,
        ctxlen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        public_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ed25519ph_verify(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        ctx: *const ::std::os::raw::c_uchar,
        ctxlen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        public_key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " X25519 Key-Exchange API"]
    pub fn x25519_make_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        which: ::std::os::raw::c_int,
        key: *const curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_import_raw(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        which: ::std::os::raw::c_int,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_import_x509(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut curve25519_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn x25519_shared_secret(
        private_key: *const curve25519_key,
        public_key: *const curve25519_key,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[doc = " DSA key structure"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct dsa_key {
    #[doc = " The key type, PK_PRIVATE or PK_PUBLIC"]
    pub type_: ::std::os::raw::c_int,
    #[doc = " The order of the sub-group used in octets"]
    pub qord: ::std::os::raw::c_int,
    #[doc = " The generator"]
    pub g: *mut ::std::os::raw::c_void,
    #[doc = " The prime used to generate the sub-group"]
    pub q: *mut ::std::os::raw::c_void,
    #[doc = " The large prime that generats the field the contains the sub-group"]
    pub p: *mut ::std::os::raw::c_void,
    #[doc = " The private key"]
    pub x: *mut ::std::os::raw::c_void,
    #[doc = " The public key"]
    pub y: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of dsa_key"][::std::mem::size_of::<dsa_key>() - 48usize];
    ["Alignment of dsa_key"][::std::mem::align_of::<dsa_key>() - 8usize];
    ["Offset of field: dsa_key::type_"][::std::mem::offset_of!(dsa_key, type_) - 0usize];
    ["Offset of field: dsa_key::qord"][::std::mem::offset_of!(dsa_key, qord) - 4usize];
    ["Offset of field: dsa_key::g"][::std::mem::offset_of!(dsa_key, g) - 8usize];
    ["Offset of field: dsa_key::q"][::std::mem::offset_of!(dsa_key, q) - 16usize];
    ["Offset of field: dsa_key::p"][::std::mem::offset_of!(dsa_key, p) - 24usize];
    ["Offset of field: dsa_key::x"][::std::mem::offset_of!(dsa_key, x) - 32usize];
    ["Offset of field: dsa_key::y"][::std::mem::offset_of!(dsa_key, y) - 40usize];
};
extern "C" {
    pub fn dsa_make_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        group_size: ::std::os::raw::c_int,
        modulus_size: ::std::os::raw::c_int,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_set_pqg(
        p: *const ::std::os::raw::c_uchar,
        plen: ::std::os::raw::c_ulong,
        q: *const ::std::os::raw::c_uchar,
        qlen: ::std::os::raw::c_ulong,
        g: *const ::std::os::raw::c_uchar,
        glen: ::std::os::raw::c_ulong,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_set_pqg_dsaparam(
        dsaparam: *const ::std::os::raw::c_uchar,
        dsaparamlen: ::std::os::raw::c_ulong,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_generate_pqg(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        group_size: ::std::os::raw::c_int,
        modulus_size: ::std::os::raw::c_int,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_set_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_generate_key(
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_free(key: *mut dsa_key);
}
extern "C" {
    pub fn dsa_sign_hash_raw(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        r: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_sign_hash(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_verify_hash_raw(
        r: *mut ::std::os::raw::c_void,
        s: *mut ::std::os::raw::c_void,
        hash: *const ::std::os::raw::c_uchar,
        hashlen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_verify_hash(
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        hash: *const ::std::os::raw::c_uchar,
        hashlen: ::std::os::raw::c_ulong,
        stat: *mut ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_encrypt_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        wprng: ::std::os::raw::c_int,
        hash: ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_decrypt_key(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_import(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_import_pkcs8(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        pw_ctx: *const password_ctx,
        key: *mut dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_export(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_: ::std::os::raw::c_int,
        key: *const dsa_key,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_verify_key(
        key: *const dsa_key,
        stat: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dsa_shared_secret(
        private_key: *mut ::std::os::raw::c_void,
        base: *mut ::std::os::raw::c_void,
        public_key: *const dsa_key,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ltc_pka_key {
    pub u: ltc_pka_key__bindgen_ty_1,
    pub id: ltc_pka_id,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ltc_pka_key__bindgen_ty_1 {
    pub x25519: curve25519_key,
    pub ed25519: curve25519_key,
    pub dh: dh_key,
    pub dsa: dsa_key,
    pub ecc: ecc_key,
    pub rsa: rsa_key,
    pub dummy: ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_pka_key__bindgen_ty_1"]
        [::std::mem::size_of::<ltc_pka_key__bindgen_ty_1>() - 248usize];
    ["Alignment of ltc_pka_key__bindgen_ty_1"]
        [::std::mem::align_of::<ltc_pka_key__bindgen_ty_1>() - 8usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::x25519"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, x25519) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::ed25519"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, ed25519) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::dh"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, dh) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::dsa"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, dsa) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::ecc"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, ecc) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::rsa"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, rsa) - 0usize];
    ["Offset of field: ltc_pka_key__bindgen_ty_1::dummy"]
        [::std::mem::offset_of!(ltc_pka_key__bindgen_ty_1, dummy) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_pka_key"][::std::mem::size_of::<ltc_pka_key>() - 256usize];
    ["Alignment of ltc_pka_key"][::std::mem::align_of::<ltc_pka_key>() - 8usize];
    ["Offset of field: ltc_pka_key::u"][::std::mem::offset_of!(ltc_pka_key, u) - 0usize];
    ["Offset of field: ltc_pka_key::id"][::std::mem::offset_of!(ltc_pka_key, id) - 248usize];
};
extern "C" {
    pub fn pka_key_free(key: *mut ltc_pka_key);
}
extern "C" {
    pub fn pka_key_destroy(key: *mut *mut ltc_pka_key);
}
pub const ltc_asn1_type__LTC_ASN1_EOL: ltc_asn1_type_ = 0;
pub const ltc_asn1_type__LTC_ASN1_BOOLEAN: ltc_asn1_type_ = 1;
pub const ltc_asn1_type__LTC_ASN1_INTEGER: ltc_asn1_type_ = 2;
pub const ltc_asn1_type__LTC_ASN1_SHORT_INTEGER: ltc_asn1_type_ = 3;
pub const ltc_asn1_type__LTC_ASN1_BIT_STRING: ltc_asn1_type_ = 4;
pub const ltc_asn1_type__LTC_ASN1_OCTET_STRING: ltc_asn1_type_ = 5;
pub const ltc_asn1_type__LTC_ASN1_NULL: ltc_asn1_type_ = 6;
pub const ltc_asn1_type__LTC_ASN1_OBJECT_IDENTIFIER: ltc_asn1_type_ = 7;
pub const ltc_asn1_type__LTC_ASN1_IA5_STRING: ltc_asn1_type_ = 8;
pub const ltc_asn1_type__LTC_ASN1_PRINTABLE_STRING: ltc_asn1_type_ = 9;
pub const ltc_asn1_type__LTC_ASN1_UTF8_STRING: ltc_asn1_type_ = 10;
pub const ltc_asn1_type__LTC_ASN1_UTCTIME: ltc_asn1_type_ = 11;
pub const ltc_asn1_type__LTC_ASN1_CHOICE: ltc_asn1_type_ = 12;
pub const ltc_asn1_type__LTC_ASN1_SEQUENCE: ltc_asn1_type_ = 13;
pub const ltc_asn1_type__LTC_ASN1_SET: ltc_asn1_type_ = 14;
pub const ltc_asn1_type__LTC_ASN1_SETOF: ltc_asn1_type_ = 15;
pub const ltc_asn1_type__LTC_ASN1_RAW_BIT_STRING: ltc_asn1_type_ = 16;
pub const ltc_asn1_type__LTC_ASN1_TELETEX_STRING: ltc_asn1_type_ = 17;
pub const ltc_asn1_type__LTC_ASN1_GENERALIZEDTIME: ltc_asn1_type_ = 18;
pub const ltc_asn1_type__LTC_ASN1_CUSTOM_TYPE: ltc_asn1_type_ = 19;
pub type ltc_asn1_type_ = ::std::os::raw::c_uint;
pub use self::ltc_asn1_type_ as ltc_asn1_type;
pub const ltc_asn1_class_LTC_ASN1_CL_UNIVERSAL: ltc_asn1_class = 0;
pub const ltc_asn1_class_LTC_ASN1_CL_APPLICATION: ltc_asn1_class = 1;
pub const ltc_asn1_class_LTC_ASN1_CL_CONTEXT_SPECIFIC: ltc_asn1_class = 2;
pub const ltc_asn1_class_LTC_ASN1_CL_PRIVATE: ltc_asn1_class = 3;
pub type ltc_asn1_class = ::std::os::raw::c_uint;
pub const ltc_asn1_pc_LTC_ASN1_PC_PRIMITIVE: ltc_asn1_pc = 0;
pub const ltc_asn1_pc_LTC_ASN1_PC_CONSTRUCTED: ltc_asn1_pc = 1;
pub type ltc_asn1_pc = ::std::os::raw::c_uint;
#[doc = " A LTC ASN.1 list type"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_asn1_list_ {
    #[doc = " The LTC ASN.1 enumerated type identifier"]
    pub type_: ltc_asn1_type,
    #[doc = " The data to encode or place for decoding"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = " The size of the input or resulting output"]
    pub size: ::std::os::raw::c_ulong,
    #[doc = " The used flag\n 1. This is used by the CHOICE ASN.1 type to indicate which choice was made\n 2. This is used by the ASN.1 decoder to indicate if an element is used\n 3. This is used by the flexi-decoder to indicate the first byte of the identifier"]
    pub used: ::std::os::raw::c_int,
    #[doc = " Flag used to indicate optional items in ASN.1 sequences"]
    pub optional: ::std::os::raw::c_int,
    #[doc = " ASN.1 identifier"]
    pub klass: ltc_asn1_class,
    pub pc: ltc_asn1_pc,
    pub tag: ulong64,
    #[doc = " prev/next entry in the list"]
    pub prev: *mut ltc_asn1_list_,
    #[doc = " prev/next entry in the list"]
    pub next: *mut ltc_asn1_list_,
    #[doc = " prev/next entry in the list"]
    pub child: *mut ltc_asn1_list_,
    #[doc = " prev/next entry in the list"]
    pub parent: *mut ltc_asn1_list_,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_asn1_list_"][::std::mem::size_of::<ltc_asn1_list_>() - 80usize];
    ["Alignment of ltc_asn1_list_"][::std::mem::align_of::<ltc_asn1_list_>() - 8usize];
    ["Offset of field: ltc_asn1_list_::type_"]
        [::std::mem::offset_of!(ltc_asn1_list_, type_) - 0usize];
    ["Offset of field: ltc_asn1_list_::data"]
        [::std::mem::offset_of!(ltc_asn1_list_, data) - 8usize];
    ["Offset of field: ltc_asn1_list_::size"]
        [::std::mem::offset_of!(ltc_asn1_list_, size) - 16usize];
    ["Offset of field: ltc_asn1_list_::used"]
        [::std::mem::offset_of!(ltc_asn1_list_, used) - 24usize];
    ["Offset of field: ltc_asn1_list_::optional"]
        [::std::mem::offset_of!(ltc_asn1_list_, optional) - 28usize];
    ["Offset of field: ltc_asn1_list_::klass"]
        [::std::mem::offset_of!(ltc_asn1_list_, klass) - 32usize];
    ["Offset of field: ltc_asn1_list_::pc"][::std::mem::offset_of!(ltc_asn1_list_, pc) - 36usize];
    ["Offset of field: ltc_asn1_list_::tag"][::std::mem::offset_of!(ltc_asn1_list_, tag) - 40usize];
    ["Offset of field: ltc_asn1_list_::prev"]
        [::std::mem::offset_of!(ltc_asn1_list_, prev) - 48usize];
    ["Offset of field: ltc_asn1_list_::next"]
        [::std::mem::offset_of!(ltc_asn1_list_, next) - 56usize];
    ["Offset of field: ltc_asn1_list_::child"]
        [::std::mem::offset_of!(ltc_asn1_list_, child) - 64usize];
    ["Offset of field: ltc_asn1_list_::parent"]
        [::std::mem::offset_of!(ltc_asn1_list_, parent) - 72usize];
};
#[doc = " A LTC ASN.1 list type"]
pub type ltc_asn1_list = ltc_asn1_list_;
extern "C" {
    pub static mut der_asn1_class_to_string_map: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static der_asn1_class_to_string_map_sz: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut der_asn1_pc_to_string_map: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static der_asn1_pc_to_string_map_sz: ::std::os::raw::c_ulong;
}
extern "C" {
    pub static mut der_asn1_tag_to_string_map: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static der_asn1_tag_to_string_map_sz: ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn der_encode_sequence_ex(
        list: *const ltc_asn1_list,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        type_of: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub const ltc_der_seq_LTC_DER_SEQ_ZERO: ltc_der_seq = 0;
#[doc = " Bit0  - [0]=Unordered (SET or SETOF)\n          [1]=Ordered (SEQUENCE)"]
pub const ltc_der_seq_LTC_DER_SEQ_UNORDERED: ltc_der_seq = 0;
#[doc = " Bit0  - [0]=Unordered (SET or SETOF)\n          [1]=Ordered (SEQUENCE)"]
pub const ltc_der_seq_LTC_DER_SEQ_ORDERED: ltc_der_seq = 1;
#[doc = " Bit1  - [0]=Relaxed\n          [1]=Strict"]
pub const ltc_der_seq_LTC_DER_SEQ_RELAXED: ltc_der_seq = 0;
#[doc = " Bit1  - [0]=Relaxed\n          [1]=Strict"]
pub const ltc_der_seq_LTC_DER_SEQ_STRICT: ltc_der_seq = 2;
#[doc = " Alternative naming"]
pub const ltc_der_seq_LTC_DER_SEQ_SET: ltc_der_seq = 0;
#[doc = " Alternative naming"]
pub const ltc_der_seq_LTC_DER_SEQ_SEQUENCE: ltc_der_seq = 1;
#[doc = " The supported bitmap for all the\n decoders with a `flags` argument."]
pub type ltc_der_seq = ::std::os::raw::c_uint;
extern "C" {
    pub fn der_decode_sequence_ex(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        list: *mut ltc_asn1_list,
        outlen: ::std::os::raw::c_ulong,
        flags: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_sequence(
        list: *const ltc_asn1_list,
        inlen: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_custom_type(
        root: *const ltc_asn1_list,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_custom_type(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        root: *mut ltc_asn1_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_custom_type(
        root: *const ltc_asn1_list,
        outlen: *mut ::std::os::raw::c_ulong,
        payloadlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_set(
        list: *const ltc_asn1_list,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_setof(
        list: *const ltc_asn1_list,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_sequence_multi(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_sequence_multi(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_sequence_flexi(
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_ulong,
        out: *mut *mut ltc_asn1_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_sequence_free(in_: *mut ltc_asn1_list);
}
extern "C" {
    pub fn der_sequence_shrink(in_: *mut ltc_asn1_list);
}
extern "C" {
    pub fn der_length_boolean(outlen: *mut ::std::os::raw::c_ulong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_boolean(
        in_: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_boolean(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_integer(
        num: *mut ::std::os::raw::c_void,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_integer(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        num: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_integer(
        num: *mut ::std::os::raw::c_void,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_short_integer(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        num: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_short_integer(
        num: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_short_integer(
        num: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_bit_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_bit_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_raw_bit_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_raw_bit_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_bit_string(
        nbits: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_octet_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_octet_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_octet_string(
        noctets: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_object_identifier(
        words: *const ::std::os::raw::c_ulong,
        nwords: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_object_identifier(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        words: *mut ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_object_identifier(
        words: *const ::std::os::raw::c_ulong,
        nwords: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_object_identifier_bits(x: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn der_encode_ia5_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_ia5_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_ia5_string(
        octets: *const ::std::os::raw::c_uchar,
        noctets: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_ia5_char_encode(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_ia5_value_decode(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_teletex_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_teletex_string(
        octets: *const ::std::os::raw::c_uchar,
        noctets: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_printable_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_printable_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_printable_string(
        octets: *const ::std::os::raw::c_uchar,
        noctets: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_printable_char_encode(c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_printable_value_decode(v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_encode_utf8_string(
        in_: *const wchar_t,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_utf8_string(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut wchar_t,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_utf8_charsize(c: wchar_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn der_length_utf8_string(
        in_: *const wchar_t,
        noctets: ::std::os::raw::c_ulong,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_choice(
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_ulong,
        list: *mut ltc_asn1_list,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_utctime {
    pub YY: ::std::os::raw::c_uint,
    pub MM: ::std::os::raw::c_uint,
    pub DD: ::std::os::raw::c_uint,
    pub hh: ::std::os::raw::c_uint,
    pub mm: ::std::os::raw::c_uint,
    pub ss: ::std::os::raw::c_uint,
    pub off_dir: ::std::os::raw::c_uint,
    pub off_hh: ::std::os::raw::c_uint,
    pub off_mm: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_utctime"][::std::mem::size_of::<ltc_utctime>() - 36usize];
    ["Alignment of ltc_utctime"][::std::mem::align_of::<ltc_utctime>() - 4usize];
    ["Offset of field: ltc_utctime::YY"][::std::mem::offset_of!(ltc_utctime, YY) - 0usize];
    ["Offset of field: ltc_utctime::MM"][::std::mem::offset_of!(ltc_utctime, MM) - 4usize];
    ["Offset of field: ltc_utctime::DD"][::std::mem::offset_of!(ltc_utctime, DD) - 8usize];
    ["Offset of field: ltc_utctime::hh"][::std::mem::offset_of!(ltc_utctime, hh) - 12usize];
    ["Offset of field: ltc_utctime::mm"][::std::mem::offset_of!(ltc_utctime, mm) - 16usize];
    ["Offset of field: ltc_utctime::ss"][::std::mem::offset_of!(ltc_utctime, ss) - 20usize];
    ["Offset of field: ltc_utctime::off_dir"]
        [::std::mem::offset_of!(ltc_utctime, off_dir) - 24usize];
    ["Offset of field: ltc_utctime::off_hh"][::std::mem::offset_of!(ltc_utctime, off_hh) - 28usize];
    ["Offset of field: ltc_utctime::off_mm"][::std::mem::offset_of!(ltc_utctime, off_mm) - 32usize];
};
extern "C" {
    pub fn der_encode_utctime(
        utctime: *const ltc_utctime,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_utctime(
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_ulong,
        out: *mut ltc_utctime,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_utctime(
        utctime: *const ltc_utctime,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_generalizedtime {
    pub YYYY: ::std::os::raw::c_uint,
    pub MM: ::std::os::raw::c_uint,
    pub DD: ::std::os::raw::c_uint,
    pub hh: ::std::os::raw::c_uint,
    pub mm: ::std::os::raw::c_uint,
    pub ss: ::std::os::raw::c_uint,
    pub fs: ::std::os::raw::c_uint,
    pub off_dir: ::std::os::raw::c_uint,
    pub off_hh: ::std::os::raw::c_uint,
    pub off_mm: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_generalizedtime"][::std::mem::size_of::<ltc_generalizedtime>() - 40usize];
    ["Alignment of ltc_generalizedtime"][::std::mem::align_of::<ltc_generalizedtime>() - 4usize];
    ["Offset of field: ltc_generalizedtime::YYYY"]
        [::std::mem::offset_of!(ltc_generalizedtime, YYYY) - 0usize];
    ["Offset of field: ltc_generalizedtime::MM"]
        [::std::mem::offset_of!(ltc_generalizedtime, MM) - 4usize];
    ["Offset of field: ltc_generalizedtime::DD"]
        [::std::mem::offset_of!(ltc_generalizedtime, DD) - 8usize];
    ["Offset of field: ltc_generalizedtime::hh"]
        [::std::mem::offset_of!(ltc_generalizedtime, hh) - 12usize];
    ["Offset of field: ltc_generalizedtime::mm"]
        [::std::mem::offset_of!(ltc_generalizedtime, mm) - 16usize];
    ["Offset of field: ltc_generalizedtime::ss"]
        [::std::mem::offset_of!(ltc_generalizedtime, ss) - 20usize];
    ["Offset of field: ltc_generalizedtime::fs"]
        [::std::mem::offset_of!(ltc_generalizedtime, fs) - 24usize];
    ["Offset of field: ltc_generalizedtime::off_dir"]
        [::std::mem::offset_of!(ltc_generalizedtime, off_dir) - 28usize];
    ["Offset of field: ltc_generalizedtime::off_hh"]
        [::std::mem::offset_of!(ltc_generalizedtime, off_hh) - 32usize];
    ["Offset of field: ltc_generalizedtime::off_mm"]
        [::std::mem::offset_of!(ltc_generalizedtime, off_mm) - 36usize];
};
extern "C" {
    pub fn der_encode_generalizedtime(
        gtime: *const ltc_generalizedtime,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_decode_generalizedtime(
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_ulong,
        out: *mut ltc_generalizedtime,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn der_length_generalizedtime(
        gtime: *const ltc_generalizedtime,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn radix_to_bin(
        in_: *const ::std::os::raw::c_void,
        radix: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_void,
        len: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
#[doc = " math descriptor"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ltc_math_descriptor {
    #[doc = " Name of the math provider"]
    pub name: *const ::std::os::raw::c_char,
    #[doc = " Bits per digit, amount of bits must fit in an unsigned long"]
    pub bits_per_digit: ::std::os::raw::c_int,
    #[doc = " initialize a bignum\n@param   a     The number to initialize\n@return  CRYPT_OK on success"]
    pub init: ::std::option::Option<
        unsafe extern "C" fn(a: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    #[doc = " init copy\n@param  dst    The number to initialize and write to\n@param  src    The number to copy from\n@return CRYPT_OK on success"]
    pub init_copy: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut *mut ::std::os::raw::c_void,
            src: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " deinit\n@param   a    The number to free\n@return CRYPT_OK on success"]
    pub deinit: ::std::option::Option<unsafe extern "C" fn(a: *mut ::std::os::raw::c_void)>,
    #[doc = " negate\n@param   src   The number to negate\n@param   dst   The destination\n@return CRYPT_OK on success"]
    pub neg: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_void,
            dst: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " copy\n@param   src   The number to copy from\n@param   dst   The number to write to\n@return CRYPT_OK on success"]
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_void,
            dst: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " set small constant\n@param a    Number to write to\n@param n    Source upto bits_per_digit (actually meant for very small constants)\n@return CRYPT_OK on success"]
    pub set_int: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            n: ltc_mp_digit,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " get small constant\n@param a  Small number to read,\nonly fetches up to bits_per_digit from the number\n@return   The lower bits_per_digit of the integer (unsigned)"]
    pub get_int: ::std::option::Option<
        unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ulong,
    >,
    #[doc = " get digit n\n@param a  The number to read from\n@param n  The number of the digit to fetch\n@return  The bits_per_digit  sized n'th digit of a"]
    pub get_digit: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
        ) -> ltc_mp_digit,
    >,
    #[doc = " Get the number of digits that represent the number\n@param a   The number to count\n@return The number of digits used to represent the number"]
    pub get_digit_count: ::std::option::Option<
        unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    #[doc = " compare two integers\n@param a   The left side integer\n@param b   The right side integer\n@return LTC_MP_LT if a < b,\nLTC_MP_GT if a > b and\nLTC_MP_EQ otherwise.  (signed comparison)"]
    pub compare: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " compare against int\n@param a   The left side integer\n@param b   The right side integer (upto bits_per_digit)\n@return LTC_MP_LT if a < b,\nLTC_MP_GT if a > b and\nLTC_MP_EQ otherwise.  (signed comparison)"]
    pub compare_d: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            n: ltc_mp_digit,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Count the number of bits used to represent the integer\n@param a   The integer to count\n@return The number of bits required to represent the integer"]
    pub count_bits: ::std::option::Option<
        unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    #[doc = " Count the number of LSB bits which are zero\n@param a   The integer to count\n@return The number of contiguous zero LSB bits"]
    pub count_lsb_bits: ::std::option::Option<
        unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    #[doc = " Compute a power of two\n@param a  The integer to store the power in\n@param n  The power of two you want to store (a = 2^n)\n@return CRYPT_OK on success"]
    pub twoexpt: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            n: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " read ascii string\n@param a     The integer to store into\n@param str   The string to read\n@param radix The radix the integer has been represented in (2-64)\n@return CRYPT_OK on success"]
    pub read_radix: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            str_: *const ::std::os::raw::c_char,
            radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " write number to string\n@param a     The integer to store\n@param str   The destination for the string\n@param radix The radix the integer is to be represented in (2-64)\n@return CRYPT_OK on success"]
    pub write_radix: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            str_: *mut ::std::os::raw::c_char,
            radix: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " get size as unsigned char string\n@param a  The integer to get the size (when stored in array of octets)\n@return   The length of the integer in octets"]
    pub unsigned_size: ::std::option::Option<
        unsafe extern "C" fn(a: *const ::std::os::raw::c_void) -> ::std::os::raw::c_ulong,
    >,
    #[doc = " store an integer as an array of octets\n@param src   The integer to store\n@param dst   The buffer to store the integer in\n@return CRYPT_OK on success"]
    pub unsigned_write: ::std::option::Option<
        unsafe extern "C" fn(
            src: *const ::std::os::raw::c_void,
            dst: *mut ::std::os::raw::c_uchar,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " read an array of octets and store as integer\n@param dst   The integer to load\n@param src   The array of octets\n@param len   The number of octets\n@return CRYPT_OK on success"]
    pub unsigned_read: ::std::option::Option<
        unsafe extern "C" fn(
            dst: *mut ::std::os::raw::c_void,
            src: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_ulong,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " add two integers\n@param a   The first source integer\n@param b   The second source integer\n@param c   The destination of \"a + b\"\n@return CRYPT_OK on success"]
    pub add: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " add two integers\n@param a   The first source integer\n@param b   The second source integer\n(single digit of upto bits_per_digit in length)\n@param c   The destination of \"a + b\"\n@return CRYPT_OK on success"]
    pub addi: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: ltc_mp_digit,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " subtract two integers\n@param a   The first source integer\n@param b   The second source integer\n@param c   The destination of \"a - b\"\n@return CRYPT_OK on success"]
    pub sub: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " subtract two integers\n@param a   The first source integer\n@param b   The second source integer\n(single digit of upto bits_per_digit in length)\n@param c   The destination of \"a - b\"\n@return CRYPT_OK on success"]
    pub subi: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: ltc_mp_digit,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " multiply two integers\n@param a   The first source integer\n@param b   The second source integer\n(single digit of upto bits_per_digit in length)\n@param c   The destination of \"a * b\"\n@return CRYPT_OK on success"]
    pub mul: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " multiply two integers\n@param a   The first source integer\n@param b   The second source integer\n(single digit of upto bits_per_digit in length)\n@param c   The destination of \"a * b\"\n@return CRYPT_OK on success"]
    pub muli: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: ltc_mp_digit,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Square an integer\n@param a    The integer to square\n@param b    The destination\n@return CRYPT_OK on success"]
    pub sqr: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Square root (mod prime)\n@param a    The integer to compute square root mod prime from\n@param b    The prime\n@param c    The destination\n@return CRYPT_OK on success"]
    pub sqrtmod_prime: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Divide an integer\n@param a    The dividend\n@param b    The divisor\n@param c    The quotient (can be NULL to signify don't care)\n@param d    The remainder (can be NULL to signify don't care)\n@return CRYPT_OK on success"]
    pub mpdiv: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
            d: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " divide by two\n@param  a   The integer to divide (shift right)\n@param  b   The destination\n@return CRYPT_OK on success"]
    pub div_2: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Get remainder (small value)\n@param  a    The integer to reduce\n@param  b    The modulus (upto bits_per_digit in length)\n@param  c    The destination for the residue\n@return CRYPT_OK on success"]
    pub modi: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: ltc_mp_digit,
            c: *mut ltc_mp_digit,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " gcd\n@param  a     The first integer\n@param  b     The second integer\n@param  c     The destination for (a, b)\n@return CRYPT_OK on success"]
    pub gcd: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " lcm\n@param  a     The first integer\n@param  b     The second integer\n@param  c     The destination for [a, b]\n@return CRYPT_OK on success"]
    pub lcm: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Modular multiplication\n@param  a     The first source\n@param  b     The second source\n@param  c     The modulus\n@param  d     The destination (a*b mod c)\n@return CRYPT_OK on success"]
    pub mulmod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *const ::std::os::raw::c_void,
            d: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Modular squaring\n@param  a     The first source\n@param  b     The modulus\n@param  c     The destination (a*a mod b)\n@return CRYPT_OK on success"]
    pub sqrmod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Modular inversion\n@param  a     The value to invert\n@param  b     The modulus\n@param  c     The destination (1/a mod b)\n@return CRYPT_OK on success"]
    pub invmod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " setup Montgomery\n@param a  The modulus\n@param b  The destination for the reduction digit\n@return CRYPT_OK on success"]
    pub montgomery_setup: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " get normalization value\n@param a   The destination for the normalization value\n@param b   The modulus\n@return  CRYPT_OK on success"]
    pub montgomery_normalization: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " reduce a number\n@param a   The number [and dest] to reduce\n@param b   The modulus\n@param c   The value \"b\" from montgomery_setup()\n@return CRYPT_OK on success"]
    pub montgomery_reduce: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " clean up  (frees memory)\n@param a   The value \"b\" from montgomery_setup()\n@return CRYPT_OK on success"]
    pub montgomery_deinit:
        ::std::option::Option<unsafe extern "C" fn(a: *mut ::std::os::raw::c_void)>,
    #[doc = " Modular exponentiation\n@param a    The base integer\n@param b    The power (can be negative) integer\n@param c    The modulus integer\n@param d    The destination\n@return CRYPT_OK on success"]
    pub exptmod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *const ::std::os::raw::c_void,
            d: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Primality testing\n@param a     The integer to test\n@param b     The number of Miller-Rabin tests that shall be executed\n@param c     The destination of the result (FP_YES if prime)\n@return CRYPT_OK on success"]
    pub isprime: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: ::std::os::raw::c_int,
            c: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " ECC GF(p) point multiplication (from the NIST curves)\n@param k   The integer to multiply the point by\n@param G   The point to multiply\n@param R   The destination for kG\n@param a   ECC curve parameter a\n@param modulus  The modulus for the field\n@param map Boolean indicated whether to map back to affine or not\n(can be ignored if you work in affine only)\n@return CRYPT_OK on success"]
    pub ecc_ptmul: ::std::option::Option<
        unsafe extern "C" fn(
            k: *const ::std::os::raw::c_void,
            G: *const ecc_point,
            R: *mut ecc_point,
            a: *const ::std::os::raw::c_void,
            modulus: *const ::std::os::raw::c_void,
            map: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " ECC GF(p) point addition\n@param P    The first point\n@param Q    The second point\n@param R    The destination of P + Q\n@param ma   The curve parameter \"a\" in montgomery form\n@param modulus  The modulus\n@param mp   The \"b\" value from montgomery_setup()\n@return CRYPT_OK on success"]
    pub ecc_ptadd: ::std::option::Option<
        unsafe extern "C" fn(
            P: *const ecc_point,
            Q: *const ecc_point,
            R: *mut ecc_point,
            ma: *const ::std::os::raw::c_void,
            modulus: *const ::std::os::raw::c_void,
            mp: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " ECC GF(p) point double\n@param P    The first point\n@param R    The destination of 2P\n@param ma   The curve parameter \"a\" in montgomery form\n@param modulus  The modulus\n@param mp   The \"b\" value from montgomery_setup()\n@return CRYPT_OK on success"]
    pub ecc_ptdbl: ::std::option::Option<
        unsafe extern "C" fn(
            P: *const ecc_point,
            R: *mut ecc_point,
            ma: *const ::std::os::raw::c_void,
            modulus: *const ::std::os::raw::c_void,
            mp: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " ECC mapping from projective to affine,\ncurrently uses (x,y,z) => (x/z^2, y/z^3, 1)\n@param P     The point to map\n@param modulus The modulus\n@param mp    The \"b\" value from montgomery_setup()\n@return CRYPT_OK on success\n@remark The mapping can be different but keep in mind a\necc_point only has three integers (x,y,z) so if\nyou use a different mapping you have to make it fit."]
    pub ecc_map: ::std::option::Option<
        unsafe extern "C" fn(
            P: *mut ecc_point,
            modulus: *const ::std::os::raw::c_void,
            mp: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Computes kA*A + kB*B = C using Shamir's Trick\n@param A        First point to multiply\n@param kA       What to multiple A by\n@param B        Second point to multiply\n@param kB       What to multiple B by\n@param C        [out] Destination point (can overlap with A or B)\n@param ma       The curve parameter \"a\" in montgomery form\n@param modulus  Modulus for curve\n@return CRYPT_OK on success"]
    pub ecc_mul2add: ::std::option::Option<
        unsafe extern "C" fn(
            A: *const ecc_point,
            kA: *mut ::std::os::raw::c_void,
            B: *const ecc_point,
            kB: *mut ::std::os::raw::c_void,
            C: *mut ecc_point,
            ma: *const ::std::os::raw::c_void,
            modulus: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " RSA Key Generation\n@param prng     An active PRNG state\n@param wprng    The index of the PRNG desired\n@param size     The size of the key in octets\n@param e        The \"e\" value (public key).\ne==65537 is a good choice\n@param key      [out] Destination of a newly created private key pair\n@return CRYPT_OK if successful, upon error all allocated ram is freed"]
    pub rsa_keygen: ::std::option::Option<
        unsafe extern "C" fn(
            prng: *mut prng_state,
            wprng: ::std::os::raw::c_int,
            size: ::std::os::raw::c_int,
            e: ::std::os::raw::c_long,
            key: *mut rsa_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " RSA exponentiation\n@param in       The octet array representing the base\n@param inlen    The length of the input\n@param out      The destination (to be stored in an octet array format)\n@param outlen   The length of the output buffer and the resulting size\n(zero padded to the size of the modulus)\n@param which    PK_PUBLIC for public RSA and PK_PRIVATE for private RSA\n@param key      The RSA key to use\n@return CRYPT_OK on success"]
    pub rsa_me: ::std::option::Option<
        unsafe extern "C" fn(
            in_: *const ::std::os::raw::c_uchar,
            inlen: ::std::os::raw::c_ulong,
            out: *mut ::std::os::raw::c_uchar,
            outlen: *mut ::std::os::raw::c_ulong,
            which: ::std::os::raw::c_int,
            key: *const rsa_key,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Modular addition\n@param  a     The first source\n@param  b     The second source\n@param  c     The modulus\n@param  d     The destination (a + b mod c)\n@return CRYPT_OK on success"]
    pub addmod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *const ::std::os::raw::c_void,
            d: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Modular substraction\n@param  a     The first source\n@param  b     The second source\n@param  c     The modulus\n@param  d     The destination (a - b mod c)\n@return CRYPT_OK on success"]
    pub submod: ::std::option::Option<
        unsafe extern "C" fn(
            a: *const ::std::os::raw::c_void,
            b: *const ::std::os::raw::c_void,
            c: *const ::std::os::raw::c_void,
            d: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    #[doc = " Make a pseudo-random mpi\n@param  a     The mpi to make random\n@param  size  The desired length\n@return CRYPT_OK on success"]
    pub rand: ::std::option::Option<
        unsafe extern "C" fn(
            a: *mut ::std::os::raw::c_void,
            size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ltc_math_descriptor"][::std::mem::size_of::<ltc_math_descriptor>() - 424usize];
    ["Alignment of ltc_math_descriptor"][::std::mem::align_of::<ltc_math_descriptor>() - 8usize];
    ["Offset of field: ltc_math_descriptor::name"]
        [::std::mem::offset_of!(ltc_math_descriptor, name) - 0usize];
    ["Offset of field: ltc_math_descriptor::bits_per_digit"]
        [::std::mem::offset_of!(ltc_math_descriptor, bits_per_digit) - 8usize];
    ["Offset of field: ltc_math_descriptor::init"]
        [::std::mem::offset_of!(ltc_math_descriptor, init) - 16usize];
    ["Offset of field: ltc_math_descriptor::init_copy"]
        [::std::mem::offset_of!(ltc_math_descriptor, init_copy) - 24usize];
    ["Offset of field: ltc_math_descriptor::deinit"]
        [::std::mem::offset_of!(ltc_math_descriptor, deinit) - 32usize];
    ["Offset of field: ltc_math_descriptor::neg"]
        [::std::mem::offset_of!(ltc_math_descriptor, neg) - 40usize];
    ["Offset of field: ltc_math_descriptor::copy"]
        [::std::mem::offset_of!(ltc_math_descriptor, copy) - 48usize];
    ["Offset of field: ltc_math_descriptor::set_int"]
        [::std::mem::offset_of!(ltc_math_descriptor, set_int) - 56usize];
    ["Offset of field: ltc_math_descriptor::get_int"]
        [::std::mem::offset_of!(ltc_math_descriptor, get_int) - 64usize];
    ["Offset of field: ltc_math_descriptor::get_digit"]
        [::std::mem::offset_of!(ltc_math_descriptor, get_digit) - 72usize];
    ["Offset of field: ltc_math_descriptor::get_digit_count"]
        [::std::mem::offset_of!(ltc_math_descriptor, get_digit_count) - 80usize];
    ["Offset of field: ltc_math_descriptor::compare"]
        [::std::mem::offset_of!(ltc_math_descriptor, compare) - 88usize];
    ["Offset of field: ltc_math_descriptor::compare_d"]
        [::std::mem::offset_of!(ltc_math_descriptor, compare_d) - 96usize];
    ["Offset of field: ltc_math_descriptor::count_bits"]
        [::std::mem::offset_of!(ltc_math_descriptor, count_bits) - 104usize];
    ["Offset of field: ltc_math_descriptor::count_lsb_bits"]
        [::std::mem::offset_of!(ltc_math_descriptor, count_lsb_bits) - 112usize];
    ["Offset of field: ltc_math_descriptor::twoexpt"]
        [::std::mem::offset_of!(ltc_math_descriptor, twoexpt) - 120usize];
    ["Offset of field: ltc_math_descriptor::read_radix"]
        [::std::mem::offset_of!(ltc_math_descriptor, read_radix) - 128usize];
    ["Offset of field: ltc_math_descriptor::write_radix"]
        [::std::mem::offset_of!(ltc_math_descriptor, write_radix) - 136usize];
    ["Offset of field: ltc_math_descriptor::unsigned_size"]
        [::std::mem::offset_of!(ltc_math_descriptor, unsigned_size) - 144usize];
    ["Offset of field: ltc_math_descriptor::unsigned_write"]
        [::std::mem::offset_of!(ltc_math_descriptor, unsigned_write) - 152usize];
    ["Offset of field: ltc_math_descriptor::unsigned_read"]
        [::std::mem::offset_of!(ltc_math_descriptor, unsigned_read) - 160usize];
    ["Offset of field: ltc_math_descriptor::add"]
        [::std::mem::offset_of!(ltc_math_descriptor, add) - 168usize];
    ["Offset of field: ltc_math_descriptor::addi"]
        [::std::mem::offset_of!(ltc_math_descriptor, addi) - 176usize];
    ["Offset of field: ltc_math_descriptor::sub"]
        [::std::mem::offset_of!(ltc_math_descriptor, sub) - 184usize];
    ["Offset of field: ltc_math_descriptor::subi"]
        [::std::mem::offset_of!(ltc_math_descriptor, subi) - 192usize];
    ["Offset of field: ltc_math_descriptor::mul"]
        [::std::mem::offset_of!(ltc_math_descriptor, mul) - 200usize];
    ["Offset of field: ltc_math_descriptor::muli"]
        [::std::mem::offset_of!(ltc_math_descriptor, muli) - 208usize];
    ["Offset of field: ltc_math_descriptor::sqr"]
        [::std::mem::offset_of!(ltc_math_descriptor, sqr) - 216usize];
    ["Offset of field: ltc_math_descriptor::sqrtmod_prime"]
        [::std::mem::offset_of!(ltc_math_descriptor, sqrtmod_prime) - 224usize];
    ["Offset of field: ltc_math_descriptor::mpdiv"]
        [::std::mem::offset_of!(ltc_math_descriptor, mpdiv) - 232usize];
    ["Offset of field: ltc_math_descriptor::div_2"]
        [::std::mem::offset_of!(ltc_math_descriptor, div_2) - 240usize];
    ["Offset of field: ltc_math_descriptor::modi"]
        [::std::mem::offset_of!(ltc_math_descriptor, modi) - 248usize];
    ["Offset of field: ltc_math_descriptor::gcd"]
        [::std::mem::offset_of!(ltc_math_descriptor, gcd) - 256usize];
    ["Offset of field: ltc_math_descriptor::lcm"]
        [::std::mem::offset_of!(ltc_math_descriptor, lcm) - 264usize];
    ["Offset of field: ltc_math_descriptor::mulmod"]
        [::std::mem::offset_of!(ltc_math_descriptor, mulmod) - 272usize];
    ["Offset of field: ltc_math_descriptor::sqrmod"]
        [::std::mem::offset_of!(ltc_math_descriptor, sqrmod) - 280usize];
    ["Offset of field: ltc_math_descriptor::invmod"]
        [::std::mem::offset_of!(ltc_math_descriptor, invmod) - 288usize];
    ["Offset of field: ltc_math_descriptor::montgomery_setup"]
        [::std::mem::offset_of!(ltc_math_descriptor, montgomery_setup) - 296usize];
    ["Offset of field: ltc_math_descriptor::montgomery_normalization"]
        [::std::mem::offset_of!(ltc_math_descriptor, montgomery_normalization) - 304usize];
    ["Offset of field: ltc_math_descriptor::montgomery_reduce"]
        [::std::mem::offset_of!(ltc_math_descriptor, montgomery_reduce) - 312usize];
    ["Offset of field: ltc_math_descriptor::montgomery_deinit"]
        [::std::mem::offset_of!(ltc_math_descriptor, montgomery_deinit) - 320usize];
    ["Offset of field: ltc_math_descriptor::exptmod"]
        [::std::mem::offset_of!(ltc_math_descriptor, exptmod) - 328usize];
    ["Offset of field: ltc_math_descriptor::isprime"]
        [::std::mem::offset_of!(ltc_math_descriptor, isprime) - 336usize];
    ["Offset of field: ltc_math_descriptor::ecc_ptmul"]
        [::std::mem::offset_of!(ltc_math_descriptor, ecc_ptmul) - 344usize];
    ["Offset of field: ltc_math_descriptor::ecc_ptadd"]
        [::std::mem::offset_of!(ltc_math_descriptor, ecc_ptadd) - 352usize];
    ["Offset of field: ltc_math_descriptor::ecc_ptdbl"]
        [::std::mem::offset_of!(ltc_math_descriptor, ecc_ptdbl) - 360usize];
    ["Offset of field: ltc_math_descriptor::ecc_map"]
        [::std::mem::offset_of!(ltc_math_descriptor, ecc_map) - 368usize];
    ["Offset of field: ltc_math_descriptor::ecc_mul2add"]
        [::std::mem::offset_of!(ltc_math_descriptor, ecc_mul2add) - 376usize];
    ["Offset of field: ltc_math_descriptor::rsa_keygen"]
        [::std::mem::offset_of!(ltc_math_descriptor, rsa_keygen) - 384usize];
    ["Offset of field: ltc_math_descriptor::rsa_me"]
        [::std::mem::offset_of!(ltc_math_descriptor, rsa_me) - 392usize];
    ["Offset of field: ltc_math_descriptor::addmod"]
        [::std::mem::offset_of!(ltc_math_descriptor, addmod) - 400usize];
    ["Offset of field: ltc_math_descriptor::submod"]
        [::std::mem::offset_of!(ltc_math_descriptor, submod) - 408usize];
    ["Offset of field: ltc_math_descriptor::rand"]
        [::std::mem::offset_of!(ltc_math_descriptor, rand) - 416usize];
};
extern "C" {
    pub static mut ltc_mp: ltc_math_descriptor;
}
extern "C" {
    pub fn ltc_init_multi(a: *mut *mut ::std::os::raw::c_void, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ltc_deinit_multi(a: *mut ::std::os::raw::c_void, ...);
}
extern "C" {
    pub fn ltc_cleanup_multi(a: *mut *mut ::std::os::raw::c_void, ...);
}
extern "C" {
    pub static tfm_desc: ltc_math_descriptor;
}
extern "C" {
    pub fn base64_encode(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64_strict_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64_sane_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64url_encode(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64url_strict_encode(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64url_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64url_strict_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base64url_sane_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
pub const base32_alphabet_BASE32_RFC4648: base32_alphabet = 0;
pub const base32_alphabet_BASE32_BASE32HEX: base32_alphabet = 1;
pub const base32_alphabet_BASE32_ZBASE32: base32_alphabet = 2;
pub const base32_alphabet_BASE32_CROCKFORD: base32_alphabet = 3;
pub type base32_alphabet = ::std::os::raw::c_uint;
extern "C" {
    pub fn base32_encode(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
        id: base32_alphabet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base32_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        id: base32_alphabet,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base16_encode(
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_char,
        outlen: *mut ::std::os::raw::c_ulong,
        options: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn base16_decode(
        in_: *const ::std::os::raw::c_char,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcrypt_pbkdf_openbsd(
        secret: *const ::std::os::raw::c_void,
        secret_len: ::std::os::raw::c_ulong,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: ::std::os::raw::c_ulong,
        rounds: ::std::os::raw::c_uint,
        hash_idx: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkdf_test() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkdf_extract(
        hash_idx: ::std::os::raw::c_int,
        salt: *const ::std::os::raw::c_uchar,
        saltlen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkdf_expand(
        hash_idx: ::std::os::raw::c_int,
        info: *const ::std::os::raw::c_uchar,
        infolen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn hkdf(
        hash_idx: ::std::os::raw::c_int,
        salt: *const ::std::os::raw::c_uchar,
        saltlen: ::std::os::raw::c_ulong,
        info: *const ::std::os::raw::c_uchar,
        infolen: ::std::os::raw::c_ulong,
        in_: *const ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mem_neq(
        a: *const ::std::os::raw::c_void,
        b: *const ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zeromem(out: *mut ::std::os::raw::c_void, outlen: usize);
}
extern "C" {
    pub fn burn_stack(len: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn error_to_string(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut crypt_build_settings: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypt_fsa(mp: *mut ::std::os::raw::c_void, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_get_constant(
        namein: *const ::std::os::raw::c_char,
        valueout: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_list_all_constants(
        names_list: *mut ::std::os::raw::c_char,
        names_list_size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_get_size(
        namein: *const ::std::os::raw::c_char,
        sizeout: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_list_all_sizes(
        names_list: *mut ::std::os::raw::c_char,
        names_list_size: *mut ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn init_TFM();
}
extern "C" {
    pub fn crypt_mp_init(mpi: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct adler32_state_s {
    pub s: [::std::os::raw::c_ushort; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of adler32_state_s"][::std::mem::size_of::<adler32_state_s>() - 4usize];
    ["Alignment of adler32_state_s"][::std::mem::align_of::<adler32_state_s>() - 2usize];
    ["Offset of field: adler32_state_s::s"][::std::mem::offset_of!(adler32_state_s, s) - 0usize];
};
pub type adler32_state = adler32_state_s;
extern "C" {
    pub fn adler32_init(ctx: *mut adler32_state);
}
extern "C" {
    pub fn adler32_update(
        ctx: *mut adler32_state,
        input: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn adler32_finish(
        ctx: *const adler32_state,
        hash: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn adler32_test() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct crc32_state_s {
    pub crc: ulong32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of crc32_state_s"][::std::mem::size_of::<crc32_state_s>() - 4usize];
    ["Alignment of crc32_state_s"][::std::mem::align_of::<crc32_state_s>() - 4usize];
    ["Offset of field: crc32_state_s::crc"][::std::mem::offset_of!(crc32_state_s, crc) - 0usize];
};
pub type crc32_state = crc32_state_s;
extern "C" {
    pub fn crc32_init(ctx: *mut crc32_state);
}
extern "C" {
    pub fn crc32_update(
        ctx: *mut crc32_state,
        input: *const ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn crc32_finish(
        ctx: *const crc32_state,
        hash: *mut ::std::os::raw::c_void,
        size: ::std::os::raw::c_ulong,
    );
}
extern "C" {
    pub fn crc32_test() -> ::std::os::raw::c_int;
}
pub const padding_type_LTC_PAD_PKCS7: padding_type = 0;
pub const padding_type_LTC_PAD_ISO_10126: padding_type = 4096;
pub const padding_type_LTC_PAD_ANSI_X923: padding_type = 8192;
pub const padding_type_LTC_PAD_SSH: padding_type = 12288;
pub const padding_type_LTC_PAD_ONE_AND_ZERO: padding_type = 32768;
pub const padding_type_LTC_PAD_ZERO: padding_type = 36864;
pub const padding_type_LTC_PAD_ZERO_ALWAYS: padding_type = 40960;
pub type padding_type = ::std::os::raw::c_uint;
extern "C" {
    pub fn padding_pad(
        data: *mut ::std::os::raw::c_uchar,
        length: ::std::os::raw::c_ulong,
        padded_length: *mut ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn padding_depad(
        data: *const ::std::os::raw::c_uchar,
        length: *mut ::std::os::raw::c_ulong,
        mode: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pem_decode(
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pem_decode_pkcs(
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
#[doc = "Callback function for each key in an `authorized_keys` file.\n\nThis function takes ownership of the `k` parameter passed.\n`k` must be free'd by calling `pka_key_destroy(&k)`.\n\n@param k        Pointer to the PKA key.\n@param comment  Pointer to a string with the comment.\n@param ctx      The `ctx` pointer as passed to the read function."]
pub type ssh_authorized_key_cb = ::std::option::Option<
    unsafe extern "C" fn(
        k: *mut ltc_pka_key,
        comment: *const ::std::os::raw::c_char,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pem_decode_openssh(
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssh_read_authorized_keys(
        buf: *const ::std::os::raw::c_void,
        len: ::std::os::raw::c_ulong,
        cb: ssh_authorized_key_cb,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pem_decode_filehandle(
        f: *mut FILE,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pem_decode_pkcs_filehandle(
        f: *mut FILE,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pem_decode_openssh_filehandle(
        f: *mut FILE,
        k: *mut ltc_pka_key,
        pw_ctx: *const password_ctx,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssh_read_authorized_keys_filehandle(
        f: *mut FILE,
        cb: ssh_authorized_key_cb,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const ssh_data_type__LTC_SSHDATA_EOL: ssh_data_type_ = 0;
pub const ssh_data_type__LTC_SSHDATA_BYTE: ssh_data_type_ = 1;
pub const ssh_data_type__LTC_SSHDATA_BOOLEAN: ssh_data_type_ = 2;
pub const ssh_data_type__LTC_SSHDATA_UINT32: ssh_data_type_ = 3;
pub const ssh_data_type__LTC_SSHDATA_UINT64: ssh_data_type_ = 4;
pub const ssh_data_type__LTC_SSHDATA_STRING: ssh_data_type_ = 5;
pub const ssh_data_type__LTC_SSHDATA_MPINT: ssh_data_type_ = 6;
pub const ssh_data_type__LTC_SSHDATA_NAMELIST: ssh_data_type_ = 7;
pub type ssh_data_type_ = ::std::os::raw::c_uint;
pub use self::ssh_data_type_ as ssh_data_type;
extern "C" {
    pub fn ssh_encode_sequence_multi(
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ssh_decode_sequence_multi(
        in_: *const ::std::os::raw::c_uchar,
        inlen: *mut ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn compare_testvector(
        is: *const ::std::os::raw::c_void,
        is_len: ::std::os::raw::c_ulong,
        should: *const ::std::os::raw::c_void,
        should_len: ::std::os::raw::c_ulong,
        what: *const ::std::os::raw::c_char,
        which: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type pthread_t = __darwin_pthread_t;
extern "C" {
    pub static sys_signame: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub static sys_siglist: [*const ::std::os::raw::c_char; 32usize];
}
extern "C" {
    pub fn raise(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsd_signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn kill(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn killpg(arg1: pid_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaction(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigaction,
        arg3: *mut sigaction,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaddset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigaltstack(arg1: *const stack_t, arg2: *mut stack_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigdelset(arg1: *mut sigset_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigemptyset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigfillset(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sighold(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigignore(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siginterrupt(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigismember(arg1: *const sigset_t, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpause(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigpending(arg1: *mut sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigprocmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigrelse(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigset(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
extern "C" {
    pub fn sigsuspend(arg1: *const sigset_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigwait(
        arg1: *const sigset_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psignal(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sigblock(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigsetmask(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sigvec(
        arg1: ::std::os::raw::c_int,
        arg2: *mut sigvec,
        arg3: *mut sigvec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypt_argchk(
        v: *const ::std::os::raw::c_char,
        s: *const ::std::os::raw::c_char,
        d: ::std::os::raw::c_int,
    ) -> !;
}
pub const ltc_pkcs_1_v1_5_blocks_LTC_PKCS_1_EMSA: ltc_pkcs_1_v1_5_blocks = 1;
pub const ltc_pkcs_1_v1_5_blocks_LTC_PKCS_1_EME: ltc_pkcs_1_v1_5_blocks = 2;
pub type ltc_pkcs_1_v1_5_blocks = ::std::os::raw::c_uint;
pub const ltc_pkcs_1_paddings_LTC_PKCS_1_V1_5: ltc_pkcs_1_paddings = 1;
pub const ltc_pkcs_1_paddings_LTC_PKCS_1_OAEP: ltc_pkcs_1_paddings = 2;
pub const ltc_pkcs_1_paddings_LTC_PKCS_1_PSS: ltc_pkcs_1_paddings = 3;
pub const ltc_pkcs_1_paddings_LTC_PKCS_1_V1_5_NA1: ltc_pkcs_1_paddings = 4;
pub type ltc_pkcs_1_paddings = ::std::os::raw::c_uint;
extern "C" {
    pub fn pkcs_1_mgf1(
        hash_idx: ::std::os::raw::c_int,
        seed: *const ::std::os::raw::c_uchar,
        seedlen: ::std::os::raw::c_ulong,
        mask: *mut ::std::os::raw::c_uchar,
        masklen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_i2osp(
        n: *mut ::std::os::raw::c_void,
        modulus_len: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_os2ip(
        n: *mut ::std::os::raw::c_void,
        in_: *mut ::std::os::raw::c_uchar,
        inlen: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_v1_5_encode(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        block_type: ::std::os::raw::c_int,
        modulus_bitlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        prng_idx: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_v1_5_decode(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        block_type: ::std::os::raw::c_int,
        modulus_bitlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        is_valid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_oaep_encode(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        lparam: *const ::std::os::raw::c_uchar,
        lparamlen: ::std::os::raw::c_ulong,
        modulus_bitlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        prng_idx: ::std::os::raw::c_int,
        mgf_hash: ::std::os::raw::c_int,
        lparam_hash: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_oaep_decode(
        msg: *const ::std::os::raw::c_uchar,
        msglen: ::std::os::raw::c_ulong,
        lparam: *const ::std::os::raw::c_uchar,
        lparamlen: ::std::os::raw::c_ulong,
        modulus_bitlen: ::std::os::raw::c_ulong,
        mgf_hash: ::std::os::raw::c_int,
        lparam_hash: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
        res: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_pss_encode(
        msghash: *const ::std::os::raw::c_uchar,
        msghashlen: ::std::os::raw::c_ulong,
        saltlen: ::std::os::raw::c_ulong,
        prng: *mut prng_state,
        prng_idx: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        modulus_bitlen: ::std::os::raw::c_ulong,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_1_pss_decode(
        msghash: *const ::std::os::raw::c_uchar,
        msghashlen: ::std::os::raw::c_ulong,
        sig: *const ::std::os::raw::c_uchar,
        siglen: ::std::os::raw::c_ulong,
        saltlen: ::std::os::raw::c_ulong,
        hash_idx: ::std::os::raw::c_int,
        modulus_bitlen: ::std::os::raw::c_ulong,
        res: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_5_alg1(
        password: *const ::std::os::raw::c_uchar,
        password_len: ::std::os::raw::c_ulong,
        salt: *const ::std::os::raw::c_uchar,
        iteration_count: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_5_alg1_openssl(
        password: *const ::std::os::raw::c_uchar,
        password_len: ::std::os::raw::c_ulong,
        salt: *const ::std::os::raw::c_uchar,
        iteration_count: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_5_alg2(
        password: *const ::std::os::raw::c_uchar,
        password_len: ::std::os::raw::c_ulong,
        salt: *const ::std::os::raw::c_uchar,
        salt_len: ::std::os::raw::c_ulong,
        iteration_count: ::std::os::raw::c_int,
        hash_idx: ::std::os::raw::c_int,
        out: *mut ::std::os::raw::c_uchar,
        outlen: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pkcs_5_test() -> ::std::os::raw::c_int;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
